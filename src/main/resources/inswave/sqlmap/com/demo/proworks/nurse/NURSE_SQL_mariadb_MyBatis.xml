<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper      
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"      
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--
	@subject : 간호사정보 관련 처리를 하는 SQL Mapper
	@description : 간호사정보 관련 처리를 하는 SQL Mapper
	@author : 개발팀
	@since : 2025/07/10
	@modification
	===========================================================
	DATE AUTHOR NOTE
	===========================================================
	2025/07/10 개발팀 최초 생성
-->
<mapper namespace="com.demo.proworks.nurse">

	<insert id="insertNurse" parameterType="com.demo.proworks.nurse.vo.NurseVo">
		<!-- 간호사 정보를 등록 처리한다. -->
		INSERT INTO nurse /* QueryID : com.demo.proworks.nurse.insertNurse */
		(
		nurse_id
		<if test="position != null"> , position </if>
		<if test="special_note != null"> , special_note </if>
		<if test="created_at != null"> , created_at </if>
		<if test="updated_at != null"> , updated_at </if>
		<if test="hire_date != null"> , hire_date </if>
		<if test="ward_id != null"> , ward_id </if>
		<if test="career != null"> , career </if>
		)
		VALUES
		(
		#{nurse_id}
		<if test="position != null"> , #{position} </if>
		<if test="special_note != null"> , #{special_note} </if>
		<if test="created_at != null"> , STR_TO_DATE(#{created_at}, '%Y-%m-%d') </if>
		<if test="updated_at != null"> , STR_TO_DATE(#{updated_at}, '%Y-%m-%d') </if>
		<if test="hire_date != null"> , STR_TO_DATE(#{hire_date}, '%Y-%m-%d') </if>
		<if test="ward_id != null"> , #{ward_id} </if>
		<if test="career != null"> , #{career} </if>
		)
	</insert>

	<update id="updateNurse" parameterType="com.demo.proworks.nurse.vo.NurseVo">
		<!-- 간호사 정보를 갱신 처리한다. -->
		UPDATE nurse /* QueryID : com.demo.proworks.nurse.updateNurse */
		<trim prefix="SET" prefixOverrides=",">
			<if test="position != null">, position = #{position} </if>
			<if test="special_note != null">, special_note = #{special_note} </if>
			<if test="updated_at != null">, updated_at = STR_TO_DATE(#{updated_at}, '%Y-%m-%d') </if>
			<if test="hire_date != null">, hire_date = STR_TO_DATE(#{hire_date}, '%Y-%m-%d') </if>
			<if test="ward_id != null">, ward_id = #{ward_id} </if>
			<if test="career != null">, career = #{career} </if>
		</trim>
		WHERE nurse_id = #{nurse_id}
	</update>

	<delete id="deleteNurse" parameterType="com.demo.proworks.nurse.vo.NurseVo">
		<!-- 간호사 정보를 삭제 처리한다. -->
		<![CDATA[
        DELETE FROM nurse   /* QueryID : com.demo.proworks.nurse.deleteNurse */  
        WHERE   nurse_id = #{nurse_id}    
		]]>
	</delete>

	<select id="selectNurse" parameterType="com.demo.proworks.nurse.vo.NurseVo" resultType="com.demo.proworks.nurse.vo.NurseVo">
		<!-- 간호사 정보를 상세 조회한다. -->
		<![CDATA[
        SELECT   /* QueryID : com.demo.proworks.nurse.selectNurse */  
              n.nurse_id AS nurse_id, 
              e.empno AS empno,
              e.ename AS nurse_name,
              n.position, 
              n.special_note AS special_note,
              DATE_FORMAT(n.created_at, '%Y-%m-%d') AS created_at,
              DATE_FORMAT(n.updated_at, '%Y-%m-%d') AS updated_at,
              DATE_FORMAT(n.hire_date, '%Y-%m-%d') AS hire_date,
              n.ward_id AS ward_id, 
              n.career,
              w.ward_name AS ward_name
        FROM nurse n
        LEFT JOIN emp e ON n.nurse_id = e.empno
        LEFT JOIN ward w ON n.ward_id = w.ward_id
        WHERE n.nurse_id = #{nurse_id}  
		]]>
	</select>

	<select id="selectListNurse" parameterType="com.demo.proworks.nurse.vo.NurseVo" resultType="com.demo.proworks.nurse.vo.NurseVo">
		<!-- 간호사 정보 목록을 조회한다. -->
		SELECT /* QueryID : com.demo.proworks.nurse.selectListNurse */
		A.nurse_id AS nurse_id,
		A.empno AS empno,
		A.ename AS nurse_name,
		A.position,
		A.special_note AS specialNote,
		DATE_FORMAT(A.created_at, '%Y-%m-%d') AS created_at,
		DATE_FORMAT(A.updated_at, '%Y-%m-%d') AS updated_at,
		DATE_FORMAT(A.hire_date, '%Y-%m-%d') AS hire_date,
		A.ward_id AS ward_id,
		A.career,
		A.ward_name AS ward_name
		FROM (
		SELECT S.*,
		CEIL((@ROWNUM:=@ROWNUM+1) / #{pageSize}) AS PAGE
		FROM (
		SELECT
		n.*,
		e.empno,
		e.ename,
		w.ward_name
		FROM nurse n
		LEFT JOIN emp e ON n.nurse_id = e.empno
		LEFT JOIN ward w ON n.ward_id = w.ward_id
		WHERE 1=1
		<if test="!( scNurseId == null  or scNurseId == ''  )">
			AND n.nurse_id = #{scNurseId}
		</if>
		<if test="!( scNurseName == null  or scNurseName == '' )">
			AND e.ename LIKE CONCAT('%',#{scNurseName},'%')
		</if>
		<if test="!( scPosition == null  or scPosition == '' )">
			AND n.position LIKE CONCAT('%',#{scPosition},'%')
		</if>
		<if test="!( scWardId == null  or scWardId == ''  )">
			AND n.ward_id = #{scWardId}
		</if>
		ORDER BY n.nurse_id ASC
		) S, (SELECT @ROWNUM := 0) TMP
		) A
		WHERE A.PAGE = #{pageIndex}
	</select>

	<select id="selectListCountNurse" parameterType="com.demo.proworks.nurse.vo.NurseVo" resultType="long">
		<!-- 간호사 정보 목록 건수를 조회한다. -->
		SELECT /* QueryID : com.demo.proworks.nurse.selectListCountNurse */
		COUNT(*) totcnt
		FROM nurse n
		LEFT JOIN emp e ON n.nurse_id = e.empno
		LEFT
		JOIN ward w ON n.ward_id = w.ward_id
		WHERE 1=1
		<if test="!( scNurseId == null  or scNurseId == ''  )">
			AND n.nurse_id = #{scNurseId}
		</if>
		<if test="!( scNurseName == null  or scNurseName == '' )">
			AND e.ename LIKE CONCAT('%',#{scNurseName},'%')
		</if>
		<if test="!( scPosition == null  or scPosition == '' )">
			AND n.position LIKE CONCAT('%',#{scPosition},'%')
		</if>
		<if test="!( scWardId == null  or scWardId == ''  )">
			AND n.ward_id = #{scWardId}
		</if>
	</select>

	<select id="selectListWard" parameterType="java.util.HashMap" resultType="com.demo.proworks.ward.vo.WardVo">
		<!-- 병동 정보 목록을 조회한다. -->
		SELECT /* QueryID : com.demo.proworks.nurse.selectListWard */
		ward_id, ward_name
		FROM ward
		ORDER BY ward_name ASC
	</select>

	<select id="selectMaxNurseId" resultType="int">
		SELECT IFNULL(MAX(nurse_id), 0) FROM nurse
	</select>

</mapper> 