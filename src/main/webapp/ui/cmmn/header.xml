<?xml version="1.0" encoding="UTF-8"?>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:ev="http://www.w3.org/2001/xml-events" xmlns:w2="http://www.inswave.com/websquare"
	xmlns:xf="http://www.w3.org/2002/xforms">
	<head meta_screenName="헤더 페이지">
		<w2:type>COMPONENT</w2:type>
		<w2:buildDate />
		<w2:MSA />
		<xf:model>
			<w2:dataCollection baseNode="map">
				<w2:dataMap baseNode="map" id="dma_nurse">
					<w2:keyInfo>
						<w2:key dataType="text" name="간호사ID" id="nurseId"></w2:key>
						<w2:key dataType="text" name="간호사명" id="nurseName"></w2:key>
						<w2:key dataType="text" name="직급" id="position"></w2:key>
					</w2:keyInfo>
				</w2:dataMap>
			</w2:dataCollection>
			<w2:workflowCollection />
			<xf:submission id="sbm_selectNurse" action="/InsWebApp/view.pwkjson" method="post" mediatype="application/json" ref='data:json,{"id":"dma_nurse","key":"nurseVo"}' target='data:json,{"id":"dma_nurse","key":"nurseVo"}' encoding="UTF-8"
				instance="" replace="" errorHandler="" customHandler="" mode="asynchronous" processMsg="" ev:submit=""
				ev:submitdone="scwin.sbm_selectNurse_submitdone" ev:submiterror="" abortTrigger="">
			</xf:submission>
		</xf:model>
		<w2:layoutInfo />
		<w2:publicInfo method="" />
		<style type="text/css">
			.header-container {
				display: flex;
				justify-content: space-between;
				align-items: center;
				padding: 0 20px;
				background: white;
				color: #333;
				position: fixed;
				top: 0;
				left: 0;
				right: 0;
				z-index: 1001;
				height: 90px;
				box-shadow: 0 2px 4px rgba(0,0,0,0.1);
				border-bottom: 1px solid #e0e0e0;
			}
			
			.left-section {
				display: flex;
				align-items: center;
				width: 60px;image.png
			}
			
			.hamburger-menu {
				width: 24px;
				height: 24px;
				cursor: pointer;
				display: flex;
				flex-direction: column;
				justify-content: space-between;
				padding: 4px 0;
				position: relative;
			}
			
			.hamburger-line {
				width: 24px;
				height: 2px;
				background: #333;
				border-radius: 1px;
				transition: all 0.3s ease;
				transform-origin: center;
			}
			
			/* 초기 상태: 사이드바가 열려있으므로 X 모양으로 시작 */
			.hamburger-menu {
				/* 초기 collapsed 상태 적용 */
			}
			
			.hamburger-menu .hamburger-line:nth-child(1) {
				transform: rotate(45deg) translate(5px, 5px);
			}
			
			.hamburger-menu .hamburger-line:nth-child(2) {
				opacity: 0;
			}
			
			.hamburger-menu .hamburger-line:nth-child(3) {
				transform: rotate(-45deg) translate(7px, -6px);
			}
			
			/* 햄버거 아이콘 토글 상태 (사이드바가 닫혔을 때 일반 햄버거로 복원) */
			.hamburger-menu.collapsed .hamburger-line:nth-child(1) {
				transform: none;
			}
			
			.hamburger-menu.collapsed .hamburger-line:nth-child(2) {
				opacity: 1;
			}
			
			.hamburger-menu.collapsed .hamburger-line:nth-child(3) {
				transform: none;
			}
			
			.center-section {
				flex: 1;
				display: flex;
				justify-content: center;
				align-items: center;
			}
			
			.logo-container {
				display: flex;
				align-items: center;
				gap: 10px;
			}
			
			.logo-image {
				width: 40px;
				height: 40px;
			}
			
			#logoImage {
				cursor: pointer;
				transition: opacity 0.2s ease;
			}
			
			#logoImage:hover {
				opacity: 0.8;
			}
			
			.logo-text {
				font-size: 24px;
				font-weight: 600;
				color: #4A90E2;
				letter-spacing: -0.5px;
			}
			
			.right-section {
				display: flex;
				align-items: center;
				gap: 15px;
				min-width: 180px;
				justify-content: flex-end;
			}
			
			.notification-container {
				position: relative;
                cursor: pointer;
			}
			
			.user-container {
				position: relative;
			}
			
			.user-info {
				display: flex;
				align-items: center;
				gap: 8px;
				cursor: pointer;
				padding: 6px 12px;
				border-radius: 20px;
				transition: background-color 0.2s;
			}
			
			.user-info:hover {
				background: rgba(0,0,0,0.05);
			}
			
			.user-details {
				text-align: right;
			}
			
			.user-name {
				font-size: 14px;
				font-weight: 600;
				color: #333;
				line-height: 1.2;
			}
			
			.user-role {
				font-size: 12px;
				color: #666;
				line-height: 1.2;
			}
			
			.dropdown-arrow {
				font-size: 12px;
				color: #666;
				margin-left: 4px;
			}
			
			.user-dropdown {
				position: absolute;
				top: 45px;
				right: 5px;
				width: 100px;
				background: white;
				border-radius: 8px;
				box-shadow: 0 4px 20px rgba(0,0,0,0.15);
				border: none;
				z-index: 1002;
				display: none;
				overflow: hidden;
				opacity: 0;
				visibility: hidden;
				transition: all 0.3s ease;
			}
			
			.user-dropdown.show {
				display: block !important;
				opacity: 1 !important;
				visibility: visible !important;
			}
			

			
			.user-menu-item {
				padding: 0;
				color: #333;
				font-size: 14px;
				cursor: pointer;
				transition: background-color 0.2s;
				display: flex;
				align-items: center;
				justify-content: center;
				width: 100%;
				height: 30px;
			}
			
			.user-menu-item:hover {
				background: #f8f9fa;
			}
			
			.user-menu-item.logout {
				color: #333;
				background: #ffffff;
				justify-content: center;
				text-align: center;
			}
			
			.user-menu-item.logout:hover {
				background: rgba(0,0,0,0.05);
			}
			
			/* 포커스 테두리 제거 */
			.user-menu-item.logout button:focus,
			.user-menu-item.logout w2\\:button:focus {
				outline: none;
				border: none;
			}
			
			/* 로그아웃 버튼 내부 요소 호버 효과 - 강제 적용 */
			.user-menu-item.logout w2\\:button,
			.user-menu-item.logout button,
			.user-menu-item.logout [id*="button"],
			.user-menu-item.logout [class*="button"],
			.user-menu-item.logout * {
				background-color: #FFFFFF !important;
				transition: background-color 0.2s;
			}
			
			.user-menu-item.logout w2\\:button:hover,
			.user-menu-item.logout button:hover,
			.user-menu-item.logout [id*="button"]:hover,
			.user-menu-item.logout [class*="button"]:hover,
			.user-menu-item.logout *:hover {
				background-color: rgba(0,0,0,0.05) !important;
			}
			
			/* 모든 로그아웃 관련 요소 강제 흰색 */
			.user-dropdown .logout *,
			#userDropdown *,
			.logout-button {
				background-color: #FFFFFF !important;
				width: 100% !important;
				height: 30px !important;
				border: none !important;
				padding: 0 !important;
			}
			
			/* 로그아웃 버튼 호버 효과 */
			.logout-button:hover {
				background-color: rgba(0,0,0,0.05) !important;
			}
			
			/* group 전체 호버 효과 */
			.user-menu-item.logout:hover {
				background-color: rgba(0,0,0,0.05) !important;
			}
			
			.user-menu-item.logout:hover * {
				background-color: rgba(0,0,0,0.05) !important;
			}
		</style>
		<script lazy="false" type="text/javascript"><![CDATA[
scwin.sidebarVisible = false;
scwin.notificationVisible = false;
scwin.userMenuVisible = false;

// ========== 알림 시스템 설정 상수 ==========
scwin.CONFIG = {
    MODAL: {
        ID: "header_notification_modal",
        MAX_WIDTH: "700px",
        MAX_HEIGHT: "80%",
        Z_INDEX: 10000
    },
    STYLES: {
        COLORS: {
            INFO: "#E3F2FD",
            WORK: "#E8F5E8",
            WARNING: "#FFF3E0",
            DEFAULT: "#F5F5F5",
            BORDER: "#2196F3",
            READ_BG: "#FFFFFF",
            UNREAD_BG: "#F0F8FF",
            READ_TEXT: "#666666",
            UNREAD_TEXT: "#333333",
            READ_BORDER: "#E0E0E0",
            UNREAD_BORDER: "#2196F3"
        },
        GRADIENT: "linear-gradient(135deg, #2196F3, #1976D2)"
    },
    ICONS: {
        INFO: "",
        WORK: "",
        WARNING: "",
        DEFAULT: "",
        UNREAD: "",
        BELL: "",
        CALENDAR: "",
        EMPTY: "",
        SUMMARY: "",
        TIP: ""
    },
    TIMINGS: {
        MARK_READ_DELAY: 3000,
        REFRESH_DELAY: 100,
        BADGE_UPDATE_DELAY: 500
    }
};

// ========== 알림 데이터 (헤더 관련) ==========
scwin.notifications = [
    {
        id: "header_noti_1",
        title: "시스템 알림",
        message: "새로운 업데이트가 적용되었습니다.",
        type: "info",
        createDate: "2025-01-15 09:00:00",
        isRead: false
    },
    {
        id: "header_noti_2",
        title: "근무표 확정",
        message: "7월 근무표가 확정되었습니다. 확인해 주세요.",
        type: "work",
        createDate: "2025-01-15 10:30:00",
        isRead: false
    },
    {
        id: "header_noti_3",
        title: "시스템 점검",
        message: "오늘 밤 12시부터 2시까지 시스템 점검이 예정되어 있습니다.",
        type: "warning",
        createDate: "2025-01-15 11:45:00",
        isRead: true
    },
    {
        id: "header_noti_4",
        title: "새로운 기능",
        message: "알림 센터 기능이 추가되었습니다. 헤더의 알림 아이콘을 클릭해보세요.",
        type: "info",
        createDate: "2025-01-15 14:20:00",
        isRead: true
    }
];

// ========== 알림 유틸리티 함수 ==========
// 알림 타입에 따른 아이콘과 색상 가져오기
scwin.getNotificationStyle = function (type) {
    switch (type) {
        case "info":
            return {
                icon: scwin.CONFIG.ICONS.INFO,
                bgColor: scwin.CONFIG.STYLES.COLORS.INFO
            };
        case "work":
            return {
                icon: scwin.CONFIG.ICONS.WORK,
                bgColor: scwin.CONFIG.STYLES.COLORS.WORK
            };
        case "warning":
            return {
                icon: scwin.CONFIG.ICONS.WARNING,
                bgColor: scwin.CONFIG.STYLES.COLORS.WARNING
            };
        default:
            return {
                icon: scwin.CONFIG.ICONS.DEFAULT,
                bgColor: scwin.CONFIG.STYLES.COLORS.DEFAULT
            };
    }
};

// 미읽은 알림 개수 계산
scwin.getUnreadCount = function () {
    var count = 0;
    for (var i = 0; i < scwin.notifications.length; i++) {
        if (!scwin.notifications[i].isRead) {
            count++;
        }
    }
    return count;
};

// 알림 HTML 생성 (모달용)
scwin.generateNotificationHTML = function () {
    var notificationHtml = "";

    if (scwin.notifications.length === 0) {
        return "<div style='text-align: center; color: #999; font-size: 16px; padding: 40px;'>" +
            scwin.CONFIG.ICONS.EMPTY + " 알림이 없습니다.</div>";
    }

    for (var i = 0; i < scwin.notifications.length; i++) {
        var notification = scwin.notifications[i];
        var style = scwin.getNotificationStyle(notification.type);
        var readStatus = notification.isRead ? "" : " " + scwin.CONFIG.ICONS.UNREAD + " (미읽음)";

        // 읽음/미읽음에 따른 스타일 설정
        var bgColor = notification.isRead ? scwin.CONFIG.STYLES.COLORS.READ_BG : scwin.CONFIG.STYLES.COLORS.UNREAD_BG;
        var textColor = notification.isRead ? scwin.CONFIG.STYLES.COLORS.READ_TEXT : scwin.CONFIG.STYLES.COLORS.UNREAD_TEXT;
        var borderColor = notification.isRead ? scwin.CONFIG.STYLES.COLORS.READ_BORDER : scwin.CONFIG.STYLES.COLORS.UNREAD_BORDER;
        var fontWeight = notification.isRead ? "normal" : "bold";
        var boxShadow = notification.isRead ? "0 1px 3px rgba(0,0,0,0.1)" : "0 2px 8px rgba(33,150,243,0.2)";

        notificationHtml +=
            "<div onclick='scwin.markNotificationAsRead(\"" + notification.id + "\")' style='margin-bottom: 15px; padding: 15px; background-color: " + bgColor + "; border-radius: 8px; border-left: 5px solid " + borderColor + "; box-shadow: " + boxShadow + "; transition: all 0.3s ease; cursor: " + (notification.isRead ? "default" : "pointer") + ";'>" +
            "<div style='font-size: 16px; font-weight: " + fontWeight + "; color: " + textColor + "; margin-bottom: 8px;'>" +
            style.icon + " " + notification.title + readStatus + "</div>" +
            "<div style='font-size: 14px; color: " + (notification.isRead ? "#777" : "#555") + "; margin-bottom: 8px; line-height: 1.4;'>" + notification.message + "</div>" +
            "<div style='font-size: 12px; color: " + (notification.isRead ? "#999" : "#888") + "; text-align: right;'>" + scwin.CONFIG.ICONS.CALENDAR + " " + notification.createDate + "</div>" +
            "</div>";
    }

    return notificationHtml;
};

// 알림 메시지 생성 (Alert용)
scwin.generateAlertMessage = function () {
    var unreadCount = scwin.getUnreadCount();
    var message = scwin.CONFIG.ICONS.BELL + " [헤더 알림 센터] " + scwin.CONFIG.ICONS.BELL + "\n\n";

    for (var i = 0; i < scwin.notifications.length; i++) {
        var notification = scwin.notifications[i];
        var style = scwin.getNotificationStyle(notification.type);
        var statusText = notification.isRead ? "[읽음]" : "[미읽음]";

        message += "━━━━━━━━━━━━━━━━━━━━━━━\n";
        message += (i + 1) + ". " + style.icon + " " + notification.title + " " + statusText + "\n";
        message += "내용: " + notification.message + "\n";
        message += "시간: " + notification.createDate + "\n\n";
    }

    message += "━━━━━━━━━━━━━━━━━━━━━━━\n";
    message += scwin.CONFIG.ICONS.SUMMARY + " 요약: 총 " + scwin.notifications.length + "개 알림 (미읽음 " + unreadCount + "개)\n\n";
    message += scwin.CONFIG.ICONS.TIP + " 이 창을 닫으면 모든 알림이 읽음 처리됩니다.";

    return message;
};

// ========== 알림 모달 관리 함수 ==========
// 알림 모달 표시
scwin.showNotificationModal = function () {
    try {
        // DOM 기반 커스텀 모달로 직접 표시
        scwin.showCustomModal();

    } catch (e) {
        scwin.showAlertNotification();
    }
};

// 커스텀 DOM 모달로 표시
scwin.showCustomModal = function () {
    try {
        // 기존 모달이 있으면 제거
        var existingModal = document.getElementById(scwin.CONFIG.MODAL.ID);
        if (existingModal) {
            existingModal.remove();
        }

        var unreadCount = scwin.getUnreadCount();
        var notificationHtml = scwin.generateNotificationHTML();

        // 모달 HTML 생성
        var modalHtml =
            "<div id='" + scwin.CONFIG.MODAL.ID + "' style='position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.5); z-index: " + scwin.CONFIG.MODAL.Z_INDEX + "; display: flex; justify-content: center; align-items: center;'>" +
            "<div style='background: white; border-radius: 12px; width: 90%; max-width: " + scwin.CONFIG.MODAL.MAX_WIDTH + "; max-height: " + scwin.CONFIG.MODAL.MAX_HEIGHT + "; box-shadow: 0 10px 30px rgba(0,0,0,0.3); overflow: hidden;'>" +

            // 헤더
            "<div style='background: #1C3D6B; color: white; padding: 20px; text-align: center;'>" +
            "<h2 style='margin: 0; font-size: 20px; font-weight: bold;'>" + scwin.CONFIG.ICONS.BELL + " 헤더 알림 센터</h2>" +
            "<p style='margin: 5px 0 0 0; font-size: 14px; opacity: 0.9;'>총 " + scwin.notifications.length + "개 알림" + (unreadCount > 0 ? " (" + scwin.CONFIG.ICONS.UNREAD + "미읽음 " + unreadCount + "개)" : "") + "</p>" +
            "</div>" +

            // 내용
            "<div style='padding: 20px; max-height: 400px; overflow-y: auto;'>" +
            notificationHtml +
            "</div>" +

            // 버튼 영역
            "<div style='border-top: 1px solid #eee; padding: 15px 20px; text-align: right; background-color: #f9f9f9;'>" +
            "<button onclick='closeCustomModal();' style='background: #f44336; color: white; border: none; padding: 10px 20px; border-radius: 6px; cursor: pointer; font-size: 14px;'>닫기</button>" +
            "</div>" +

            "</div>" +
            "</div>";

        // DOM에 추가
        document.body.insertAdjacentHTML('beforeend', modalHtml);

        // 이벤트 리스너 등록
        scwin.attachModalEventListeners();

        // 자동 읽음 처리 (시간을 늘려서 사용자가 개별 클릭할 시간 확보)
        setTimeout(function () {
            scwin.markAllAsRead();
        }, 10000); // 10초로 변경

    } catch (e) {
        scwin.showAlertNotification();
    }
};

// Alert로 알림 표시 (대체 방법)
scwin.showAlertNotification = function () {
    try {
        var message = scwin.generateAlertMessage();
        var unreadCount = scwin.getUnreadCount();

        alert(message);

        // 1초 후 모든 알림을 읽음 처리
        setTimeout(function () {
            scwin.markAllAsRead();
        }, 1000);

    } catch (e) {
        // 최후의 수단
        alert("알림 표시 중 오류가 발생했습니다.\n현재 " + scwin.notifications.length + "개의 알림이 있습니다.\n개발자 도구 콘솔을 확인해주세요.");
    }
};

// ========== 알림 관리 함수 ==========
// 모든 알림을 읽음 처리
scwin.markAllAsRead = function () {
    var hasChanges = false;

    for (var i = 0; i < scwin.notifications.length; i++) {
        if (!scwin.notifications[i].isRead) {
            scwin.notifications[i].isRead = true;
            hasChanges = true;
        }
    }

    if (hasChanges) {
        scwin.updateNotificationBadge();
    }
};

// 개별 알림 읽음 처리
scwin.markNotificationAsRead = function (notificationId) {
    for (var i = 0; i < scwin.notifications.length; i++) {
        if (scwin.notifications[i].id === notificationId && !scwin.notifications[i].isRead) {
            scwin.notifications[i].isRead = true;
            scwin.updateNotificationBadge();

            // 모달 새로고침하여 색상 변경
            scwin.refreshModal();
            return true;
        }
    }
    return false;
};

// 전역 함수로도 등록
window.markNotificationAsRead = scwin.markNotificationAsRead;

// 알림 배지 업데이트 (헤더용)
scwin.updateNotificationBadge = function () {
    try {
        var unreadCount = scwin.getUnreadCount();

        // 버튼 찾기 (캐싱)
        if (!scwin._btnAlarmCache) {
            scwin._btnAlarmCache = $w.getComponentById("alarm") || document.getElementById("alarm");
        }

        var btnAlarm = scwin._btnAlarmCache;
        if (!btnAlarm) {
            return;
        }

        // 배지 요소 찾기
        var badgeElement = document.getElementById("notificationBadge");
        var countElement = document.getElementById("notificationCount");

        // 현재 상태와 비교하여 필요한 경우만 업데이트
        var shouldShowBadge = unreadCount > 0;
        var currentlyShowingBadge = btnAlarm._badgeActive || false;

        if (shouldShowBadge !== currentlyShowingBadge) {
            if (shouldShowBadge) {
                // 미읽은 알림이 있으면 빨간 테두리
                var badgeStyle = "border: 3px solid #FF0000; border-radius: 50%; box-shadow: 0 0 10px #FF0000;";
                if (btnAlarm.setStyle) {
                    btnAlarm.setStyle(badgeStyle);
                } else {
                    btnAlarm.style.border = "3px solid #FF0000";
                    btnAlarm.style.borderRadius = "50%";
                    btnAlarm.style.boxShadow = "0 0 10px #FF0000";
                }
                btnAlarm._badgeActive = true;

                // 배지 표시 및 숫자 업데이트
                if (badgeElement) {
                    badgeElement.style.display = "block";
                }
                if (countElement) {
                    countElement.setValue(unreadCount.toString());
                }

                // 헤더 알림 배지 활성화
            } else {
                // 미읽은 알림이 없으면 원래 상태
                if (btnAlarm.setStyle) {
                    btnAlarm.setStyle("border: none; box-shadow: none;");
                } else {
                    btnAlarm.style.border = "none";
                    btnAlarm.style.boxShadow = "none";
                }
                btnAlarm._badgeActive = false;

                // 배지 숨기기
                if (badgeElement) {
                    badgeElement.style.display = "none";
                }
            }
        } else if (shouldShowBadge && countElement) {
            // 배지가 이미 표시되어 있지만 숫자가 다른 경우 업데이트
            countElement.setValue(unreadCount.toString());
        }

    } catch (e) {
        // 배지 업데이트 중 오류
    }
};

// 테스트 알림 추가 함수는 제거됨

// 간단한 모달 닫기 함수 (테스트용)
scwin.simpleCloseModal = function () {
    try {
        var modal = document.getElementById("header_notification_modal");
        if (modal) {
            modal.style.display = 'none';
        }
    } catch (e) {
        // 간단한 모달 닫기 오류
    }
};

// 전역 함수로도 등록
window.simpleCloseModal = scwin.simpleCloseModal;

// 모달 새로고침 (성능 최적화)
scwin.refreshModal = function () {
    var existingModal = document.getElementById(scwin.CONFIG.MODAL.ID);
    if (existingModal) {
        scwin.closeCustomModal();
        setTimeout(function () {
            scwin.showNotificationModal();
        }, scwin.CONFIG.TIMINGS.REFRESH_DELAY);
    }
};

// 커스텀 모달 닫기 (개선된 버전)
scwin.closeCustomModal = function () {
    try {
        var modal = document.getElementById(scwin.CONFIG.MODAL.ID);
        if (modal) {
            // IE 호환성을 위해 remove() 대신 removeChild() 사용
            if (modal.parentNode) {
                modal.parentNode.removeChild(modal);
            } else {
                modal.remove();
            }
        }
    } catch (e) {
        // 모달 닫기 중 오류
        // 최후의 수단: display none으로 숨기기
        try {
            var modal = document.getElementById(scwin.CONFIG.MODAL.ID);
            if (modal) {
                modal.style.display = 'none';
            }
        } catch (e2) {
            // 모달 숨기기 실패
        }
    }
};

// 전역 함수로도 등록 (HTML onclick에서 접근 가능하도록)
window.closeCustomModal = function () {
    if (scwin && scwin.closeCustomModal) {
        scwin.closeCustomModal();
    } else {
        try {
            var modal = document.getElementById("header_notification_modal");
            if (modal) {
                modal.style.display = 'none';
            }
        } catch (e) {
            // 전역 함수 오류
        }
    }
};

// 모달 이벤트 리스너 등록
scwin.attachModalEventListeners = function () {
    var modal = document.getElementById(scwin.CONFIG.MODAL.ID);
    if (!modal) return;

    // 모달 외부 클릭 시 닫기
    modal.addEventListener('click', function (e) {
        if (e.target === modal) {
            scwin.closeCustomModal();
        }
    });

    // ESC 키로 닫기 (한 번만 등록)
    if (!scwin._escListenerAttached) {
        document.addEventListener('keydown', function (e) {
            if (e.key === 'Escape' && document.getElementById(scwin.CONFIG.MODAL.ID)) {
                scwin.closeCustomModal();
            }
        });
        scwin._escListenerAttached = true;
    }
};

scwin.onpageload = function () {
    // 초기 상태 설정
    scwin.hideUserMenu();

    // 알림 시스템 초기화
    setTimeout(function () {
        try {
            if (scwin.updateNotificationBadge) {
                scwin.updateNotificationBadge();
            }
        } catch (e) {
            // 알림 시스템 초기화 중 오류
        }
    }, 100);

    // 로그인한 사용자 정보 가져오기
    try {
        // 세션에서 로그인한 사용자 ID 가져오기
        var loggedInUserId = "";

        // WebSquare에서 세션 정보 가져오기
        if (typeof $w !== 'undefined' && $w.getSession) {
            var session = $w.getSession();
            if (session && session.userId) {
                loggedInUserId = session.userId;
            } else if (session && session.empno) {
                loggedInUserId = session.empno;
            }
        }

        // 세션에서 가져오지 못한 경우 기본값 사용
        if (!loggedInUserId) {
            loggedInUserId = "1111"; // 임시 기본값
        } else {
            // nurseId로 사용할 값 설정 (로그인 ID에서 숫자 부분만 추출)
            var nurseId = loggedInUserId.replace(/[^0-9]/g, '');
            if (nurseId) {
                loggedInUserId = nurseId;
            }
        }

        // dma_nurse에 사용자 ID 설정
        dma_nurse.set("nurseId", loggedInUserId);
        dma_nurse.broadcast();

        // 서브미션 실행
        $c.sbm.execute(sbm_selectNurse);
    } catch (e) {
        // 사용자 정보 로드 중 오류
    }
};

scwin.toggleSidebar = function () {
    var success = false;

    // 방법 1: 부모 프레임에서 직접 함수 호출
    try {
        if (window.parent && window.parent.scwin && window.parent.scwin.toggleSidebar) {
            window.parent.scwin.toggleSidebar();
            success = true;
        }
    } catch (e) {
    }

    // 방법 2: 전역 함수로 등록된 함수 호출
    if (!success) {
        try {
            if (window.parent && window.parent.toggleSidebarFromHeader) {
                window.parent.toggleSidebarFromHeader();
                success = true;
            }
        } catch (e) {
        }
    }

    // 방법 3: 최상위 프레임에서 함수 찾기
    if (!success) {
        try {
            if (window.top && window.top.scwin && window.top.scwin.toggleSidebar) {
                window.top.scwin.toggleSidebar();
                success = true;
            }
        } catch (e) {
        }
    }

    // 방법 4: postMessage 사용
    if (!success) {
        try {
            window.parent.postMessage({
                action: 'toggleSidebar',
                source: 'header'
            }, '*');
            success = true;
        } catch (e) {
        }
    }

    if (!success) {
        alert("사이드바 토글 기능에 문제가 있습니다. 페이지를 새로고침해주세요.");
    }
};

// 햄버거 아이콘 업데이트 함수
scwin.updateHamburgerIcon = function (isVisible) {
    try {
        var hamburgerMenu = document.querySelector('.hamburger-menu');
        if (hamburgerMenu) {
            if (isVisible) {
                // 사이드바가 열려있을 때 → X 모양 유지 (collapsed 클래스 제거)
                hamburgerMenu.classList.remove('collapsed');
            } else {
                // 사이드바가 닫혀있을 때 → 일반 햄버거 아이콘 (collapsed 클래스 추가)
                hamburgerMenu.classList.add('collapsed');
            }
        }
    } catch (e) {
    }
};

// 알림 토글 함수는 alarm_onclick으로 대체됨

scwin.toggleUserMenu = function () {
    // 이벤트 전파 중단 (body 클릭 이벤트 방지)
    if (event) {
        event.stopPropagation();
        event.preventDefault();
    }

    if (scwin.userMenuVisible) {
        scwin.hideUserMenu();
    } else {
        scwin.showUserMenu();
    }
};

scwin.showUserMenu = function () {
    try {
        // 디버깅: 모든 user-dropdown 요소 찾기
        var allDropdowns = document.querySelectorAll('.user-dropdown');

        // 여러 방법으로 드롭다운 메뉴 찾기
        var dropdown = document.getElementById('userDropdown') ||
            document.querySelector('.user-dropdown') ||
            document.querySelector('[id="userDropdown"]');

        if (dropdown) {
            // display를 먼저 block으로 설정
            dropdown.style.display = 'block';
            dropdown.style.visibility = 'visible';
            dropdown.style.opacity = '1';
            dropdown.style.zIndex = '9999';

            // 클래스 추가
            dropdown.classList.add('show');

            scwin.userMenuVisible = true;
        } else {
            // 대체 방법: 모든 user-dropdown 클래스 요소에 적용
            for (var i = 0; i < allDropdowns.length; i++) {
                var element = allDropdowns[i];
                element.style.display = 'block';
                element.style.visibility = 'visible';
                element.style.opacity = '1';
                element.style.zIndex = '9999';
                element.classList.add('show');
            }
            scwin.userMenuVisible = true;
        }
    } catch (e) {
    }
};

scwin.hideUserMenu = function () {
    try {
        // 여러 방법으로 드롭다운 메뉴 찾기
        var dropdown = document.getElementById('userDropdown') ||
            document.querySelector('.user-dropdown') ||
            document.querySelector('[id="userDropdown"]');

        if (dropdown) {
            // 클래스 제거
            dropdown.classList.remove('show');

            // 스타일 직접 설정
            dropdown.style.display = 'none';
            dropdown.style.visibility = 'hidden';
            dropdown.style.opacity = '0';

            scwin.userMenuVisible = false;
        } else {
            // 대체 방법: 모든 user-dropdown 클래스 요소에 적용
            var elements = document.querySelectorAll('.user-dropdown');
            for (var i = 0; i < elements.length; i++) {
                elements[i].classList.remove('show');
                elements[i].style.display = 'none';
                elements[i].style.visibility = 'hidden';
                elements[i].style.opacity = '0';
            }
            scwin.userMenuVisible = false;
        }
    } catch (e) {
    }
};

scwin.logout = function () {
    // 이벤트 전파 중단
    if (event) {
        event.stopPropagation();
        event.preventDefault();
    }

    try {
        // 사용자 메뉴 숨기기
        scwin.hideUserMenu();

        // 바로 로그인 페이지로 리다이렉트
        window.location.href = "/InsWebApp/websquare/websquare.html?w2xPath=/InsWebApp/ui/user/Login.xml";

    } catch (e) {
        // 오류 발생 시에도 로그인 페이지로 이동
        window.location.href = "/InsWebApp/websquare/websquare.html?w2xPath=/InsWebApp/ui/user/Login.xml";
    }
};

// 외부 클릭 시 메뉴 닫기
scwin.closeMenus = function () {
    // 사용자 메뉴가 열려있을 때만 닫기
    if (scwin.userMenuVisible) {
        scwin.hideUserMenu();
    }
};

// 로고 클릭 시 홈으로 이동
scwin.goToHome = function () {
    try {
        window.location.href = "http://shiftmate:9093/InsWebApp/websquare/websquare.html?w2xPath=/InsWebApp/ui/layout/MainPage.xml";
    } catch (e) {
        alert("페이지 이동 중 오류가 발생했습니다.");
    }
};

scwin.alarm_onclick = function (e) {
    try {
        scwin.showNotificationModal();
    } catch (error) {
        scwin.showAlertNotification();
    }
};

scwin.sbm_selectNurse_submitdone = function (e) {
    // 서버 오류 체크
    if (e.responseJSON && e.responseJSON.elHeader && e.responseJSON.elHeader.resSuc === false) {
        // 기본값 설정
        dma_nurse.set("nurseId", "1111");
        dma_nurse.set("nurseName", "김간호");
        dma_nurse.set("position", "수간호사");
        dma_nurse.broadcast();
        return;
    }

    // 성공적인 응답 처리 (NurseVo 객체)
    if (e.responseJSON) {
        var userInfo = e.responseJSON.elData;

        dma_nurse.set("nurseId", userInfo.nurseId);
        dma_nurse.set("nurseName", userInfo.nurseName || "");
        dma_nurse.set("position", userInfo.position || "");

        // 데이터 변경 알림
        dma_nurse.broadcast();
    } else {
        // 기본값 설정
        dma_nurse.set("nurseId", loggedInUserId || "1111");
        dma_nurse.set("nurseName", "김간호");
        dma_nurse.set("position", "수간호사");
        dma_nurse.broadcast();
    }
};
]]></script>
	</head>
	<body ev:onpageload="scwin.onpageload" ev:onclick="scwin.closeMenus">
		<xf:group class="header-container">
			<xf:group class="left-section">
				<xf:group class="hamburger-menu" ev:onclick="scwin.toggleSidebar">
					<xf:group class="hamburger-line"></xf:group>
					<xf:group class="hamburger-line"></xf:group>
					<xf:group class="hamburger-line"></xf:group>
				</xf:group>
			</xf:group>
			
			<xf:group class="center-section">
				<xf:group class="logo-container">
                    <xf:image src="/InsWebApp/images/logo.png" style="width: 200px;height: 60px;cursor:pointer;" id="logoImage" ev:onclick="scwin.goToHome"></xf:image>
				</xf:group>
			</xf:group>
			
			<xf:group class="right-section">
				<xf:group class="notification-container">
				</xf:group>
				
				<xf:group class="user-container">
					<xf:group class="user-info" ev:onclick="scwin.toggleUserMenu" ev:onclick.stopPropagation="true">
						<xf:group class="user-details">
							<w2:textbox id="txt_userName" class="user-name" ref="data:dma_nurse.nurseName" style="display:block;"></w2:textbox>
							<w2:textbox id="txt_userRole" class="user-role" ref="data:dma_nurse.position" style="display:block;"></w2:textbox>
						</xf:group>
						<w2:textbox id="" class="dropdown-arrow" label="▼"></w2:textbox>
					</xf:group>

					<!-- 사용자 드롭다운 메뉴 -->
					<xf:group id="userDropdown" class="user-dropdown" style=";border-color:#FFFFFF;">
							<w2:button id="btn_userDropdown" class="logout-button" label="로그아웃" style="font-size:14px; color:#333; font-weight:bold;" ev:onclick="scwin.logout" ev:onclick.stopPropagation="true">
                                <xf:image src="/InsWebApp/images/iconlogout.png" style="width:20px;height:20px;" id="iconlogout" alt="로그아웃 아이콘" />
                            </w2:button>
					</xf:group>
				</xf:group>
			</xf:group>
		</xf:group>
	</body>
</html>