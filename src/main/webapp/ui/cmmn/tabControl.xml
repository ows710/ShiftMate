<?xml version="1.0" encoding="UTF-8"?>
<html xmlns="http://www.w3.org/1999/xhtml"
    xmlns:ev="http://www.w3.org/2001/xml-events"
    xmlns:w2="http://www.inswave.com/websquare" xmlns:xf="http://www.w3.org/2002/xforms">
    <head meta_screenName="탭 컨트롤">
        <w2:type>COMPONENT</w2:type>
        <w2:buildDate/>
        <w2:MSA/>
        <xf:model>
            <w2:dataCollection baseNode="map"/>
            <w2:workflowCollection/>
        </xf:model>
        <w2:layoutInfo/>
        <w2:publicInfo method=""/>
        <style type="text/css">
            .tab-container {
                margin-left: -66px;
                height: 50px;
                background: #f8f9fa;
                overflow: hidden;
                position: relative;
                z-index: 100;
                display: block !important;
                visibility: visible !important;
                opacity: 1 !important;
            }
            
            .tab-control {
                width: 15px !important;
                height: 50px !important;
                position: relative !important;
                display: block !important;
                visibility: visible !important;
            }
            
            /* 웹스퀘어 탭 컨트롤 기본 스타일 재정의 */
            .w2_tabControl {
                border: none !important;
                background: transparent !important;
                width: 15px !important;
                height: 50px !important;
                display: block !important;
                visibility: visible !important;
                opacity: 1 !important;
            }
            
            .w2_tabControl_tabs {
                height: 50px !important;
                background: #f8f9fa !important;
                border: none !important;
                padding: 0 !important;
                margin: 0 !important;
                width: 15px !important;
                display: flex !important;
                align-items: center !important;
                visibility: visible !important;
                opacity: 1 !important;
                justify-content: flex-start !important;
            }
            
            .w2_tabControl_tab {
                background: #e9ecef !important;
                border: 1px solid #dee2e6 !important;
                border-bottom: none !important;
                border-radius: 6px 6px 0 0 !important;
                padding: 8px 16px !important;
                margin-right: 2px !important;
                min-width: 120px !important;
                max-width: 200px !important;
                height: 35px !important;
                font-size: 13px !important;
                font-weight: normal !important;
                color: #333 !important;
                transition: all 0.2s ease !important;
                cursor: pointer !important;
                display: inline-flex !important;
                align-items: center !important;
                justify-content: space-between !important;
                white-space: nowrap !important;
                visibility: visible !important;
                opacity: 1 !important;
            }
            
            /* 빈 탭 요소 완전히 숨기기 */
            .w2_tabControl_tab:empty,
            .w2_tabControl_tab:not(:has(*)),
            .w2_tabControl_tab[style*="display: none"],
            .w2_tabControl_tab[style*="visibility: hidden"],
            .w2_tabControl_tab:not(.active):not(:has(.w2_tabControl_tab_text)),
            .w2_tabControl_tab:not(.active):not(:has(*)) {
                display: none !important;
                visibility: hidden !important;
                opacity: 0 !important;
                width: 0 !important;
                height: 0 !important;
                margin: 0 !important;
                padding: 0 !important;
                border: none !important;
                position: absolute !important;
                left: -9999px !important;
            }
            
            /* 빈 탭 컨테이너 숨기기 */
            .w2_tabControl_tabs:empty,
            .w2_tabControl_tabs:not(:has(.w2_tabControl_tab)) {
                display: none !important;
            }
            
            /* 탭 컨테이너에서 빈 공간 제거 */
            .w2_tabControl_tabs {
                gap: 0 !important;
                flex-wrap: nowrap !important;
            }
            
            /* 첫 번째 탭이 아닌 빈 탭들 완전히 제거 */
            .w2_tabControl_tab:not(:first-child):empty,
            .w2_tabControl_tab:not(:first-child):not(:has(*)) {
                display: none !important;
                width: 0 !important;
                height: 0 !important;
                margin: 0 !important;
                padding: 0 !important;
                border: none !important;
                position: absolute !important;
                left: -9999px !important;
                top: -9999px !important;
            }
            
            .w2_tabControl_tab:hover {
                background: #d1ecf1 !important;
                border-color: #17a2b8 !important;
            }
            
            .w2_tabControl_tab.active {
                background: #1C3D6B !important;
                color: white !important;
                border-color: #1C3D6B !important;
                font-weight: bold !important;
                z-index: 10 !important;
            }
            
            .w2_tabControl_tab .w2_tabControl_tab_close {
                width: 16px !important;
                height: 16px !important;
                border-radius: 50% !important;
                background: rgba(255, 255, 255, 0.3) !important;
                margin-left: 8px !important;
                font-size: 10px !important;
                line-height: 16px !important;
                cursor: pointer !important;
                transition: all 0.2s ease !important;
                flex-shrink: 0 !important;
            }
            
            .w2_tabControl_tab.active .w2_tabControl_tab_close {
                background: rgba(255, 255, 255, 0.2) !important;
            }
            
            .w2_tabControl_tab .w2_tabControl_tab_close:hover {
                background: rgba(255, 255, 255, 0.5) !important;
                transform: scale(1.1) !important;
            }
            
            .w2_tabControl_tab_text {
                overflow: hidden !important;
                text-overflow: ellipsis !important;
                white-space: nowrap !important;
                max-width: calc(100% - 30px) !important;
                flex: 1 !important;
            }
            
            .w2_tabControl_content {
                display: none !important;
            }
            
            /* 탭 컨트롤이 보이지 않을 때를 위한 대체 스타일 */
            .tab-container:empty::after {
                content: "탭 컨트롤 로딩 중...";
                display: flex;
                align-items: center;
                justify-content: center;
                height: 50px;
                color: #666;
                font-size: 14px;
            }
            
            /* 탭 컨트롤 강제 표시를 위한 추가 스타일 */
            .tab-container.force-visible {
                display: block !important;
                visibility: visible !important;
                opacity: 1 !important;
                height: 50px !important;
            }
            
            .w2_tabControl.force-visible {
                display: block !important;
                visibility: visible !important;
                opacity: 1 !important;
                height: 50px !important;
            }
            
            .w2_tabControl_tabs.force-visible {
                display: flex !important;
                visibility: visible !important;
                opacity: 1 !important;
                height: 50px !important;
            }
        </style>
        <script lazy="false" type="text/javascript"><![CDATA[
// WebSquare scwin 객체 초기화 확인
if (typeof scwin === 'undefined') {
    var scwin = {};
}

scwin.onpageload = function() {
    
    // 즉시 초기화 시도
    scwin.initializeTabControl();
    
    // 탭 컨트롤이 완전히 로드될 때까지 대기
    scwin.waitForTabControl();
    
    // 날짜 라벨 설정
    scwin.setupDateLabels();
    
    // 0.5초 후 빈 탭들 정리
    setTimeout(function() {
        scwin.cleanupEmptyTabs();
    }, 500);
    
    // 1초 후 빈 탭들 정리
    setTimeout(function() {
        scwin.cleanupEmptyTabs();
    }, 1000);
    
    // 2초 후 빈 탭들 정리
    setTimeout(function() {
        scwin.cleanupEmptyTabs();
    }, 2000);
    
    // 3초 후 다시 한번 정리
    setTimeout(function() {
        scwin.cleanupEmptyTabs();
    }, 3000);
    
    // 5초 후 최종 정리
    setTimeout(function() {
        scwin.cleanupEmptyTabs();
    }, 5000);
};

// 탭 컨트롤 로드 대기 함수
scwin.waitForTabControl = function() {
    var attempts = 0;
    var maxAttempts = 30; // 시도 횟수 줄임
    
    var checkTabControl = function() {
        attempts++;
        
        // tab1 객체가 존재하고 필요한 메서드들이 있는지 확인
        if (typeof tab1 !== 'undefined' && tab1.addTab && tab1.getTab && tab1.setSelectedTabIndex) {
            scwin.initializeTabControl();
        } else {
            if (attempts < maxAttempts) {
                setTimeout(checkTabControl, 200); // 간격 늘림
            } else {
                // 탭 컨트롤이 없어도 기본 기능은 동작하도록
                scwin.initializeTabControl();
            }
        }
    };
    
    checkTabControl();
};

// 탭 컨트롤 초기화
scwin.initializeTabControl = function() {
    try {
        // 부모 프레임과의 통신 설정 (항상 실행)
        scwin.setupParentCommunication();
        
        // 기존 빈 탭들 정리
        scwin.cleanupEmptyTabs();
        
        // 탭 컨트롤이 정상적으로 로드된 경우에만 기본 탭 추가
        if (typeof tab1 !== 'undefined' && tab1.addTab) {
            // 기본 탭 추가 (근무자 관리)
            scwin.addTab("menu_duty_manage", "근무자 관리", "/InsWebApp/ui/nurse/NurseManage.xml", true);
        } else {
        }
        
        // 탭 클릭 이벤트를 위한 DOM 이벤트 리스너 추가 (백업용)
        scwin.setupTabClickListeners();
        
        // 2초 후 기본 탭이 제대로 추가되었는지 확인
        setTimeout(function() {
            if (!scwin.tabUrlMap || !scwin.tabUrlMap['menu_duty_manage']) {
                scwin.addTab("menu_duty_manage", "근무자 관리", "/InsWebApp/ui/nurse/NurseManage.xml", true);
            }
            // 빈 탭들 다시 정리
            scwin.cleanupEmptyTabs();
        }, 2000);
        
    } catch (e) {
    }
};

// 빈 탭들을 정리하는 함수
scwin.cleanupEmptyTabs = function() {
    try {
        // 모든 탭 요소들 찾기
        var allTabs = document.querySelectorAll('.w2_tabControl_tab');
        
        allTabs.forEach(function(tab, index) {
            // 탭 내용 확인
            var hasContent = tab.textContent && tab.textContent.trim().length > 0;
            var hasChildren = tab.children && tab.children.length > 0;
            var hasTextElement = tab.querySelector('.w2_tabControl_tab_text');
            var isActive = tab.classList.contains('active');
            var isVisible = tab.style.display !== 'none' && tab.style.visibility !== 'hidden';
            
            // 빈 탭이거나 내용이 없는 탭 완전히 숨기기
            if (!hasContent && !hasChildren && !hasTextElement && !isActive) {
                tab.style.display = 'none';
                tab.style.visibility = 'hidden';
                tab.style.opacity = '0';
                tab.style.width = '0';
                tab.style.height = '0';
                tab.style.margin = '0';
                tab.style.padding = '0';
                tab.style.border = 'none';
                tab.style.position = 'absolute';
                tab.style.left = '-9999px';
                tab.style.top = '-9999px';
                
                // DOM에서 완전히 제거
                if (tab.parentNode) {
                    tab.parentNode.removeChild(tab);
                }
            }
        });
        
        // 탭 컨테이너에서 빈 공간 제거
        var tabContainer = document.querySelector('.w2_tabControl_tabs');
        if (tabContainer) {
            // 보이는 탭들만 확인
            var visibleTabs = tabContainer.querySelectorAll('.w2_tabControl_tab:not([style*="display: none"]):not([style*="visibility: hidden"])');
            
            if (visibleTabs.length === 0) {
                tabContainer.style.display = 'none';
            } else {
                // 탭 컨테이너를 보이는 탭들만 포함하도록 조정
                tabContainer.style.justifyContent = 'flex-start';
                tabContainer.style.gap = '0';
                tabContainer.style.flexWrap = 'nowrap';
            }
        }
        
        // 추가로 빈 요소들 완전히 제거
        var emptyElements = document.querySelectorAll('.w2_tabControl_tab:empty, .w2_tabControl_tab:not(:has(*))');
        emptyElements.forEach(function(element) {
            if (element.parentNode) {
                element.parentNode.removeChild(element);
            }
        });
        
    } catch (e) {
    }
};

// 탭 클릭 이벤트를 위한 DOM 이벤트 리스너 설정 (백업용)
scwin.setupTabClickListeners = function() {
    try {
        // 탭 요소들을 찾아서 클릭 이벤트 추가
        var setupListeners = function() {
            var tabElements = document.querySelectorAll('.w2_tabControl_tab');
            
            tabElements.forEach(function(tabElement, index) {
                // 이미 이벤트가 추가되었는지 확인
                if (tabElement._clickListenerAdded) {
                    return;
                }
                
                // 탭 ID 추출 (여러 방법으로 시도)
                var tabId = tabElement.getAttribute('data-tab-id') || 
                           tabElement.getAttribute('data-tab-url') ||
                           tabElement.getAttribute('id') ||
                           tabElement.querySelector('.w2_tabControl_tab_text')?.textContent?.trim() ||
                           tabElement.textContent.trim();
                
                // 탭 URL도 추출
                var tabUrl = tabElement.getAttribute('data-tab-url');
                
                // 클릭 이벤트 추가
                tabElement.addEventListener('click', function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    
                    // 탭 클릭 함수 호출
                    if (scwin.tab1_onclick) {
                        scwin.tab1_onclick(tabId);
                    }
                }, true); // 캡처링 단계에서 실행
                
                // 더블클릭 이벤트도 추가
                tabElement.addEventListener('dblclick', function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    
                    // 탭 클릭 함수 호출
                    if (scwin.tab1_onclick) {
                        scwin.tab1_onclick(tabId);
                    }
                }, true);
                
                // 마우스다운 이벤트도 추가 (WebSquare 환경 대응)
                tabElement.addEventListener('mousedown', function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    
                    // 탭 클릭 함수 호출
                    if (scwin.tab1_onclick) {
                        scwin.tab1_onclick(tabId);
                    }
                }, true);
                
                // 이벤트 추가 완료 표시
                tabElement._clickListenerAdded = true;
                
                // 탭 요소에 탭 ID 저장
                tabElement.setAttribute('data-tab-id', tabId);
            });
        };
        
        // 즉시 실행
        setupListeners();
        
        // 1초 후 다시 실행 (동적으로 추가되는 탭들을 위해)
        setTimeout(setupListeners, 1000);
        
        // 2초 후 다시 실행
        setTimeout(setupListeners, 2000);
        
    } catch (e) {
    }
};

// 부모 프레임과의 통신 설정
scwin.setupParentCommunication = function() {
    try {
        if (window.parent && window.parent.scwin) {
            // 부모에서 탭 추가 함수 호출할 수 있도록 연결
            window.parent.scwin.addTabToControl = scwin.addTab;
            window.parent.scwin.activateTabInControl = scwin.activateTab;
            window.parent.scwin.closeTabInControl = scwin.closeTab;
        }
    } catch (e) {
    }
};

// 웹스퀘어 공식 API를 사용한 탭 추가
scwin.addTab = async function(tabId, tabTitle, tabUrl, isActive) {
    try {
        
        // 탭 컨트롤이 로드되었는지 확인
        if (typeof tab1 === 'undefined' || !tab1.addTab) {
            return;
        }
        
        // 이미 존재하는 탭인지 확인
        try {
            var existingTab = await tab1.getTab(tabId);
            if (existingTab) {
                await scwin.activateTab(tabId);
                return;
            }
        } catch (e) {
            // getTab에서 오류가 발생하면 탭이 존재하지 않는 것으로 간주
        }
        
        // 탭 URL 정보를 내부 저장소에 저장
        if (!scwin.tabUrlMap) {
            scwin.tabUrlMap = {};
        }
        scwin.tabUrlMap[tabId] = tabUrl;
        
        // 웹스퀘어 공식 API를 사용하여 탭 추가
        var newTabId = await tab1.addTab(tabId, {
            "label": tabTitle,
            "title": tabTitle,
            "openAction": "exist",
            "closable": "true"
        }, {
            "src": tabUrl,
            "frameMode": "wframePreload",
            "scope": true,
            "alwaysDraw": "false"
        });
        
        // 활성 탭으로 설정
        if (isActive) {
            await scwin.activateTab(tabId);
        }
        
        // 탭 추가 후 탭 요소에 데이터 속성 설정
        setTimeout(function() {
            var tabElements = document.querySelectorAll('.w2_tabControl_tab');
            tabElements.forEach(function(tabElement) {
                var tabText = tabElement.querySelector('.w2_tabControl_tab_text');
                if (tabText && tabText.textContent.trim() === tabTitle) {
                    tabElement.setAttribute('data-tab-id', tabId);
                    tabElement.setAttribute('data-tab-url', tabUrl);
                }
            });
        }, 200);
        
        // 탭 추가 후 빈 탭들 정리
        setTimeout(function() {
            scwin.cleanupEmptyTabs();
        }, 100);
        
        // 탭 추가 후 DOM 이벤트 리스너 다시 설정
        setTimeout(function() {
            scwin.setupTabClickListeners();
        }, 500);
        
    } catch (e) {
    }
};

// 웹스퀘어 공식 API를 사용한 탭 활성화
scwin.activateTab = async function(tabId) {
    try {
        
        // 탭 컨트롤이 로드되었는지 확인
        if (typeof tab1 === 'undefined' || !tab1.setSelectedTabIndex) {
            return;
        }
        
        // 해당 탭을 활성화
        await tab1.setSelectedTabIndex(tabId);
        
        // 부모 프레임에 활성 탭 정보 전달
        if (window.parent && window.parent.scwin) {
            window.parent.scwin.currentActiveTabId = tabId;
        }
        
    } catch (e) {
    }
};

// 웹스퀘어 공식 API를 사용한 탭 닫기
scwin.closeTab = async function(tabId) {
    try {
        
        // 탭 컨트롤이 로드되었는지 확인
        if (typeof tab1 === 'undefined' || !tab1.removeTab) {
            return;
        }
        
        // 저장된 URL 정보 정리
        if (scwin.tabUrlMap && scwin.tabUrlMap[tabId]) {
            delete scwin.tabUrlMap[tabId];
        }
        
        // 탭 제거
        await tab1.removeTab(tabId);
        
    } catch (e) {
    }
};

// 탭 ID로 탭 찾기
scwin.findTabById = async function(tabId) {
    try {
        // 탭 컨트롤이 로드되었는지 확인
        if (typeof tab1 === 'undefined' || !tab1.getTab) {
            return null;
        }
        
        var tab = await tab1.getTab(tabId);
        return tab;
    } catch (e) {
        return null;
    }
};

// 탭 클릭 이벤트 (웹스퀘어 탭 컨트롤에서 자동 호출)
scwin.tab1_onclick = function(tabId) {
    try {
        
        // 탭 ID가 없으면 기본값 설정
        if (!tabId) {
            tabId = "menu_duty_manage";
        }
        
        // URL 결정 (동기 방식으로 변경)
        var finalUrl = null;
        // 1. 저장된 URL 정보 확인 (우선순위 1)
        if (scwin.tabUrlMap && scwin.tabUrlMap[tabId]) {
            finalUrl = scwin.tabUrlMap[tabId];
        } else {
            // 2. URL 추정 (우선순위 2)
            finalUrl = scwin.getUrlFromTabId(tabId);
        }
        
        // 3. 부모 프레임에 메인 콘텐츠 변경 요청
        if (window.parent && window.parent.scwin && finalUrl) {
            
            // 부모 프레임의 함수 호출
            if (window.parent.scwin.changeMainContentFromTab) {
                try {
                    window.parent.scwin.changeMainContentFromTab(finalUrl);
                } catch (e) {
                    // 대체 방법 시도
                    scwin.fallbackMainContentChange(finalUrl);
                }
            } else {
                // 대체 방법 시도
                scwin.fallbackMainContentChange(finalUrl);
            }
            
            // 사이드메뉴 활성 메뉴도 업데이트
            var menuId = scwin.getMenuIdFromTabId(tabId);
            if (menuId && window.parent.scwin.updateSideMenuActiveMenuWithRetry) {
                try {
                    window.parent.scwin.updateSideMenuActiveMenuWithRetry(menuId, 0);
                } catch (e) {
                }
            }
        } else {
        }
        
    } catch (e) {
    }
};

// 대체 메인 콘텐츠 변경 함수
scwin.fallbackMainContentChange = function(url) {
    try {
        
        // 방법 1: 직접 wfr_mainContent 접근
        if (window.parent.wfr_mainContent && window.parent.wfr_mainContent.setSrc) {
            window.parent.wfr_mainContent.setSrc(url);
            return;
        }
        
        // 방법 2: postMessage 사용
        window.parent.postMessage({
            action: 'changeMainContent',
            url: url
        }, '*');
        
    } catch (e) {
    }
};

// 탭 닫기 이벤트 (웹스퀘어 탭 컨트롤에서 자동 호출)
scwin.tab1_onclose = async function(tabId) {
    try {
        
        // 부모 프레임에 탭 닫기 알림
        if (window.parent && window.parent.scwin) {
            window.parent.scwin.onTabClosed(tabId);
        }
        
        // 탭이 닫힌 후 남은 탭 개수 확인
        setTimeout(async function() {
            try {
                // 새로운 함수를 사용하여 기본 탭 존재 확인 및 추가
                await scwin.ensureDefaultTabExists();
            } catch (e) {
                // 오류 발생 시에도 안전하게 근무자 관리 탭 추가
                try {
                    await scwin.addTab("menu_duty_manage", "근무자 관리", "/InsWebApp/ui/nurse/NurseManage.xml", true);
                    if (window.parent && window.parent.scwin && window.parent.scwin.changeMainContentFromTab) {
                        window.parent.scwin.changeMainContentFromTab("/InsWebApp/ui/nurse/NurseManage.xml");
                    }
                } catch (addError) {
                }
            }
        }, 100); // 100ms 지연으로 탭 닫기 완료 후 확인
        
    } catch (e) {
    }
};

// 탭 ID로 메뉴 ID를 찾는 함수
scwin.getMenuIdFromTabId = function(tabId) {
    // 탭 ID와 메뉴 ID가 동일한 경우가 많음
    return tabId;
};

// 탭 ID로 URL을 추정하는 함수
scwin.getUrlFromTabId = function(tabId) {
    var tabUrlMap = {
        'menu_duty_manage': '/InsWebApp/ui/nurse/NurseManage.xml',
        'menu_schedule_manage': '/InsWebApp/ui/schedule/makeDuty.xml',
        'menu_my_schedule': '/InsWebApp/ui/duty/myschedule.xml',
        'menu_work_input': '/InsWebApp/ui/duty/HopeWorkEntry.xml'
    };
    
    return tabUrlMap[tabId] || null;
};

// 현재 활성 탭 개수를 확인하는 함수
scwin.getActiveTabCount = async function() {
    try {
        // 방법 1: WebSquare API 사용
        if (typeof tab1 !== 'undefined' && tab1.getTabCount) {
            try {
                var count = await tab1.getTabCount();
                return count;
            } catch (e) {
            }
        }
        
        // 방법 2: DOM으로 확인
        var visibleTabs = document.querySelectorAll('.w2_tabControl_tab:not([style*="display: none"]):not([style*="visibility: hidden"]):not([style*="opacity: 0"])');
        var actualVisibleTabs = Array.from(visibleTabs).filter(function(tab) {
            // 실제로 내용이 있는 탭만 카운트
            var hasContent = tab.textContent && tab.textContent.trim().length > 0;
            var hasTextElement = tab.querySelector('.w2_tabControl_tab_text');
            var isVisible = tab.offsetWidth > 0 && tab.offsetHeight > 0;
            return hasContent || hasTextElement || isVisible;
        });
        
        return actualVisibleTabs.length;
        
    } catch (e) {
        return 0;
    }
};

// 근무자 관리 탭을 안전하게 추가하는 함수
scwin.ensureDefaultTabExists = async function() {
    try {
        
        // 현재 탭 개수 확인
        var tabCount = await scwin.getActiveTabCount();
        
        if (tabCount === 0) {
            await scwin.addTab("menu_duty_manage", "근무자 관리", "/InsWebApp/ui/nurse/NurseManage.xml", true);
            
            // 부모 프레임에도 알림
            if (window.parent && window.parent.scwin && window.parent.scwin.changeMainContentFromTab) {
                window.parent.scwin.changeMainContentFromTab("/InsWebApp/ui/nurse/NurseManage.xml");
            }
            
            return true;
        } else {
            return false;
        }
        
    } catch (e) {
        return false;
    }
};

// 현재 날짜를 'yyyy-mm-dd' 형식으로 반환하는 함수
scwin.getCurrentDate = function() {
    var today = new Date();
    var year = today.getFullYear();
    var month = String(today.getMonth() + 1).padStart(2, '0');
    var day = String(today.getDate()).padStart(2, '0');
    return year + '-' + month + '-' + day;
};

// 텍스트 라벨에 현재 날짜 설정하는 함수
scwin.setCurrentDateToLabel = function(labelId) {
    try {
        var currentDate = scwin.getCurrentDate();
        
        // 방법 1: WebSquare 컴포넌트로 직접 접근
        if (window[labelId] && window[labelId].setValue) {
            window[labelId].setValue(currentDate);
            return;
        }
        
        // 방법 2: DOM 요소로 직접 접근
        var labelElement = document.getElementById(labelId);
        if (labelElement) {
            labelElement.textContent = currentDate;
            return;
        }
        
        // 방법 3: WebSquare ID 패턴으로 검색
        var w2Element = document.getElementById('mf_' + labelId);
        if (w2Element) {
            w2Element.textContent = currentDate;
            return;
        }
        
    } catch (e) {
    }
};

// 페이지 로드 시 자동으로 날짜 설정
scwin.setupDateLabels = function() {
    // 페이지 로드 후 약간의 지연을 두고 실행
    setTimeout(function() {
        // 여러 라벨에 날짜 설정 (예시)
        scwin.setCurrentDateToLabel('txt_currentDate');
        scwin.setCurrentDateToLabel('lbl_today');
        scwin.setCurrentDateToLabel('txt_date');
        
    }, 500);
};
]]></script>
    </head>
    <body ev:onpageload="scwin.onpageload">
        <xf:group class="tab-container">
            <w2:tabControl id="tab1" class="tab-control" alwaysDraw="false" style="width:100%;height:50px;" 
                confirmFalseAction="new" confirmTrueAction="exist" useConfirmMessage="false" 
                useMoveNextTabFocus="false" useTabKeyOnly="true" ev:onclick="scwin.tab1_onclick" ev:onclose="scwin.tab1_onclose">
                <w2:tabs disabled="false" style="width:100%;height:50px;" id="tabs1"></w2:tabs>
                <w2:content alwaysDraw="true" style="display:none;" id="content1"></w2:content>
            </w2:tabControl>
        </xf:group>
    </body>
</html>


