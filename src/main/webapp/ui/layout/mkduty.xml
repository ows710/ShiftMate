<?xml version="1.0" encoding="UTF-8"?>
<html xmlns="http://www.w3.org/1999/xhtml"
    xmlns:ev="http://www.w3.org/2001/xml-events"
    xmlns:w2="http://www.inswave.com/websquare" xmlns:xf="http://www.w3.org/2002/xforms">
    <head meta_screenName="근무자 관리(웹) 실화면">
        <w2:type>COMPONENT</w2:type>
        <w2:buildDate/>
        <w2:MSA/>
        <xf:model>
            <w2:dataCollection baseNode="map"/>
            <w2:workflowCollection/>
        </xf:model>
        <w2:layoutInfo/>
        <w2:publicInfo method=""/>
        <style type="text/css">
            /* 완전한 여백 제거 */
            * {
                margin: 0;
                padding: 0;
                box-sizing: border-box;
            }
            
            html, body {
                height: 100%;
                width: 100%;
                overflow: hidden;
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            }
            
            /* WFrame 여백 완전 제거 */
            w2\:wframe {
                border: none !important;
                margin: 0 !important;
                padding: 0 !important;
            }
            
            w2\:wframe iframe {
                border: none !important;
                margin: 0 !important;
                padding: 0 !important;
            }
            
            /* 사이드바 토글 관련 스타일 */
            .sidebar-collapsed {
                transform: translateX(-250px) !important;
                transition: transform 0.3s ease !important;
            }
            
            .sidebar-expanded {
                transform: translateX(0) !important;
                transition: transform 0.3s ease !important;
            }
            
            .main-content-collapsed {
                margin-left: 0 !important;
                width: 100% !important;
                transition: margin-left 0.3s ease, width 0.3s ease !important;
            }
            
            .main-content-expanded {
                margin-left: 250px !important;
                width: calc(100% - 250px) !important;
                transition: margin-left 0.3s ease, width 0.3s ease !important;
            }
        </style>
        <script lazy="false" type="text/javascript"><![CDATA[
// WebSquare scwin 객체 초기화 확인
if (typeof scwin === 'undefined') {
    var scwin = {};
    console.log("mkduty.xml: scwin 객체를 새로 생성했습니다.");
}

// 사이드바 상태 관리 변수
scwin.sidebarVisible = true;

scwin.onpageload = function() {
    console.log("ShiftMate Layout Manager 시작");
    
    // DOM 준비 상태 확인
    scwin.waitForDOMReady();
};

// DOM이 완전히 준비될 때까지 기다리는 함수
scwin.waitForDOMReady = function() {
    var attempts = 0;
    var maxAttempts = 50;
    
    var checkDOMReady = function() {
        attempts++;
        console.log("DOM 준비 상태 확인:", attempts + "/" + maxAttempts);
        
        // 필수 요소들이 존재하는지 확인
        var mainContainer = document.getElementById('grp_mainContainer');
        var sideMenuArea = document.getElementById('grp_sideMenuArea');
        var mainContentArea = document.getElementById('grp_mainContent');
        
        if (document.readyState === 'complete' && document.body && 
            mainContainer && sideMenuArea && mainContentArea) {
            console.log("✅ DOM 준비 완료!");
            scwin.initializeLayout();
            scwin.waitForFramesAndSetup();
            scwin.setupPostMessageListener();
            
            // 전역 함수로 등록
            window.toggleSidebarFromHeader = scwin.toggleSidebar;
            console.log("✅ 전역 함수 등록 완료");
            
            // 초기 햄버거 아이콘 상태 설정
            scwin.updateHamburgerIcon(scwin.sidebarVisible);
            console.log("✅ 초기 햄버거 아이콘 상태 설정 완료");
        } else if (attempts < maxAttempts) {
            setTimeout(checkDOMReady, 100);
        } else {
            console.error("❌ DOM 준비 타임아웃!");
            scwin.initializeLayout();
            scwin.waitForFramesAndSetup();
            scwin.setupPostMessageListener();
            window.toggleSidebarFromHeader = scwin.toggleSidebar;
            scwin.updateHamburgerIcon(scwin.sidebarVisible);
        }
    };
    
    checkDOMReady();
};

scwin.initializeLayout = function() {
    // 브라우저 스크롤 완전 제거
    document.documentElement.style.overflow = 'hidden';
    document.body.style.overflow = 'hidden';
    console.log("✅ 레이아웃 초기화 완료");
};

scwin.waitForFramesAndSetup = function() {
    var attempts = 0;
    var maxAttempts = 50;
    
    var checkInterval = setInterval(function() {
        attempts++;
        
        try {
            var headerReady = wfr_header && wfr_header.getWindow && wfr_header.getWindow();
            var sideMenuReady = wfr_sideMenu && wfr_sideMenu.getWindow && wfr_sideMenu.getWindow();
            var mainReady = wfr_mainContent && wfr_mainContent.getWindow && wfr_mainContent.getWindow();
            var tabControlReady = wfr_tabControl && wfr_tabControl.getWindow && wfr_tabControl.getWindow();
            
            if (headerReady && sideMenuReady && mainReady && tabControlReady) {
                clearInterval(checkInterval);
                console.log("✅ 모든 WFrame 로드 완료 (" + attempts + "/50)");
                scwin.setupFrameCommunication();
                
                // 현재 URL에 해당하는 메뉴 활성화 (약간의 지연 후)
                setTimeout(function() {
                    scwin.activateMenuForCurrentUrl();
                }, 500);
            } else if (attempts >= maxAttempts) {
                clearInterval(checkInterval);
                console.warn("⚠️ WFrame 로드 타임아웃");
            }
        } catch (e) {
            if (attempts >= maxAttempts) {
                clearInterval(checkInterval);
                console.error("❌ WFrame 로드 실패:", e);
            }
        }
    }, 100);
};

scwin.setupFrameCommunication = function() {
    try {
        // 사이드메뉴 통신 설정
        if (wfr_sideMenu && wfr_sideMenu.getWindow) {
            var sideMenuWindow = wfr_sideMenu.getWindow();
            if (sideMenuWindow && sideMenuWindow.scwin) {
                sideMenuWindow.scwin.onMenuClick = scwin.handleMenuClick;
                console.log("✅ 사이드메뉴 통신 연결");
            }
        }
        
        // 탭 컨트롤 통신 설정
        if (wfr_tabControl && wfr_tabControl.getWindow) {
            var tabControlWindow = wfr_tabControl.getWindow();
            if (tabControlWindow && tabControlWindow.scwin) {
                // 탭 컨트롤에서 메인 콘텐츠 변경 함수 연결
                tabControlWindow.scwin.changeMainContentFromTab = scwin.changeMainContentFromTab;
                console.log("✅ 탭 컨트롤 통신 연결");
            }
        }
        
        // 헤더 통신 설정
        scwin.setupHeaderCommunication();
        
        // 메인 콘텐츠 프레임 로드 이벤트 감지
        scwin.setupMainContentLoadListener();
        
        console.log("✅ 프레임 간 통신 설정 완료");
    } catch (e) {
        console.error("프레임 통신 설정 오류:", e);
    }
};

// 메인 콘텐츠 프레임 로드 이벤트 리스너 설정
scwin.setupMainContentLoadListener = function() {
    try {
        if (wfr_mainContent) {
            // WFrame의 로드 이벤트 감지
            wfr_mainContent.addEventListener('load', function() {
                console.log("메인 콘텐츠 프레임 로드 완료");
                // 약간의 지연 후 현재 URL에 해당하는 메뉴 활성화
                setTimeout(function() {
                    scwin.activateMenuForCurrentUrl();
                }, 300);
            });
            
            // src 변경 감지
            var originalSetSrc = wfr_mainContent.setSrc;
            wfr_mainContent.setSrc = function(src) {
                originalSetSrc.call(this, src);
                console.log("메인 콘텐츠 src 변경:", src);
                
                // src 변경 후 약간의 지연을 두고 메뉴 활성화
                setTimeout(function() {
                    scwin.activateMenuForCurrentUrl();
                }, 500);
            };
            
            console.log("✅ 메인 콘텐츠 로드 리스너 설정 완료");
        }
    } catch (e) {
        console.error("메인 콘텐츠 로드 리스너 설정 오류:", e);
    }
};

// 헤더 통신을 별도 함수로 분리하여 재시도 로직 추가
scwin.setupHeaderCommunication = function() {
    var attempts = 0;
    var maxAttempts = 20;
    
    var setupHeader = function() {
        attempts++;
        console.log("헤더 통신 설정 시도:", attempts + "/" + maxAttempts);
        
        try {
            if (wfr_header && wfr_header.getWindow) {
                var headerWindow = wfr_header.getWindow();
                if (headerWindow && headerWindow.scwin) {
                    // 헤더에서 사이드바 토글 함수 호출할 수 있도록 연결
                    headerWindow.scwin.toggleSidebar = scwin.toggleSidebar;
                    
                    // 추가적인 통신 방법 - 전역 함수로도 등록
                    headerWindow.toggleSidebarFromHeader = scwin.toggleSidebar;
                    
                    console.log("✅ 헤더 통신 연결 완료");
                    return true;
                }
            }
        } catch (e) {
            console.log("헤더 통신 설정 시도 중 오류:", e);
        }
        
        if (attempts < maxAttempts) {
            setTimeout(setupHeader, 200);
        } else {
            console.error("❌ 헤더 통신 설정 실패 - 최대 시도 횟수 초과");
        }
        
        return false;
    };
    
    setupHeader();
};

// 사이드바 토글 함수 (재시도 로직 포함)
scwin.toggleSidebar = function() {
    console.log("사이드바 토글 함수 호출됨! 현재 상태:", scwin.sidebarVisible);
    
    scwin.toggleSidebarWithRetry(0);
};

// 재시도 로직이 포함된 사이드바 토글 함수
scwin.toggleSidebarWithRetry = function(attempt) {
    var maxAttempts = 10;
    attempt = attempt || 0;
    
    console.log("사이드바 토글 시도:", (attempt + 1) + "/" + maxAttempts);
    
    try {
        // WebSquare에서 확인된 실제 ID 직접 사용
        var sideMenuArea = document.getElementById('mf_grp_sideMenuArea') || scwin.findElement('grp_sideMenuArea');
        var mainContentArea = document.getElementById('mf_grp_mainContent') || scwin.findElement('grp_mainContent');
        
        if (!sideMenuArea || !mainContentArea) {
            if (attempt < maxAttempts - 1) {
                setTimeout(function() {
                    scwin.toggleSidebarWithRetry(attempt + 1);
                }, 100);
                return;
            } else {
                console.error("❌ 모든 재시도 실패 - 필수 요소를 찾을 수 없습니다!");
                scwin.debugDOMStructure();
                alert("사이드바 요소를 찾을 수 없습니다. 페이지를 새로고침해주세요.");
                return;
            }
        }
        
        if (scwin.sidebarVisible) {
            // 사이드바 숨기기
            sideMenuArea.classList.remove('sidebar-expanded');
            sideMenuArea.classList.add('sidebar-collapsed');
            mainContentArea.classList.remove('main-content-expanded');
            mainContentArea.classList.add('main-content-collapsed');
            scwin.sidebarVisible = false;
        } else {
            // 사이드바 보이기
            sideMenuArea.classList.remove('sidebar-collapsed');
            sideMenuArea.classList.add('sidebar-expanded');
            mainContentArea.classList.remove('main-content-collapsed');
            mainContentArea.classList.add('main-content-expanded');
            scwin.sidebarVisible = true;
        }
        
        // 헤더의 햄버거 아이콘 업데이트
        scwin.updateHamburgerIcon(scwin.sidebarVisible);
        
        console.log("사이드바 토글 완료! 새로운 상태:", scwin.sidebarVisible);
        
    } catch (e) {
        console.error("❌ 사이드바 토글 오류:", e);
        if (attempt < maxAttempts - 1) {
            setTimeout(function() {
                scwin.toggleSidebarWithRetry(attempt + 1);
            }, 100);
        } else {
            alert("사이드바 토글 중 오류가 발생했습니다: " + e.message);
        }
    }
};

// 포괄적인 요소 검색 함수
scwin.findElement = function(elementId) {
    // 1. 기본 getElementById
    var element = document.getElementById(elementId);
    if (element) return element;
    
    // 2. WebSquare에서 추가하는 mf_ 접두사 고려
    element = document.getElementById('mf_' + elementId);
    if (element) return element;
    
    // 3. querySelector로 ID 검색
    element = document.querySelector('#' + elementId);
    if (element) return element;
    
    // 4. mf_ 접두사와 함께 querySelector 검색
    element = document.querySelector('#mf_' + elementId);
    if (element) return element;
    
    // 5. 부분 ID 매칭으로 검색
    element = document.querySelector('[id*="' + elementId + '"]');
    if (element) return element;
    
    return null;
};

// DOM 구조 디버깅 함수
scwin.debugDOMStructure = function() {
    console.log("=== DOM 구조 디버깅 ===");
    
    // ID가 있는 모든 요소 출력
    var elementsWithId = document.querySelectorAll('[id]');
    console.log("ID가 있는 요소들 (" + elementsWithId.length + "개):");
    for (var i = 0; i < Math.min(elementsWithId.length, 20); i++) {
        console.log("  - " + elementsWithId[i].tagName + "#" + elementsWithId[i].id);
    }
};

// 햄버거 아이콘 업데이트
scwin.updateHamburgerIcon = function(isVisible) {
    try {
        if (wfr_header && wfr_header.getWindow) {
            var headerWindow = wfr_header.getWindow();
            if (headerWindow && headerWindow.scwin && headerWindow.scwin.updateHamburgerIcon) {
                headerWindow.scwin.updateHamburgerIcon(isVisible);
            }
        }
    } catch (e) {
        console.error("햄버거 아이콘 업데이트 오류:", e);
    }
};

// 메뉴 클릭 처리 (개선된 방식)
scwin.handleMenuClick = function(menuId, menuUrl) {
    try {
        console.log("메뉴 클릭:", menuId, "->", menuUrl);
        
        // 메뉴 ID에 해당하는 탭 제목 매핑
        var tabTitle = scwin.getTabTitleFromMenuId(menuId);
        
        // 탭 컨트롤에 탭 추가 (재시도 로직 포함)
        scwin.addTabToControlWithRetry(menuId, tabTitle, menuUrl, true, 0);
        
        // 메인 콘텐츠 변경
        if (wfr_mainContent && menuUrl) {
            wfr_mainContent.setSrc(menuUrl);
            console.log("✅ 메인 콘텐츠 변경:", menuUrl);
        }
        
        // 활성 메뉴 업데이트 (재시도 로직 포함)
        scwin.updateSideMenuActiveMenuWithRetry(menuId, 0);
        
        // 현재 활성 메뉴 ID 저장
        scwin.currentActiveMenuId = menuId;
        
    } catch (e) {
        console.error("메뉴 클릭 처리 오류:", e);
    }
};

// 재시도 로직이 포함된 탭 추가 함수
scwin.addTabToControlWithRetry = function(tabId, tabTitle, tabUrl, isActive, attempt) {
    var maxAttempts = 15;
    attempt = attempt || 0;
    
    console.log("탭 추가 시도:", (attempt + 1) + "/" + maxAttempts, "탭ID:", tabId);
    
    try {
        if (wfr_tabControl && wfr_tabControl.getWindow) {
            var tabControlWindow = wfr_tabControl.getWindow();
            if (tabControlWindow && tabControlWindow.scwin && tabControlWindow.scwin.addTab) {
                // 웹스퀘어 공식 API를 사용한 탭 추가
                tabControlWindow.scwin.addTab(tabId, tabTitle, tabUrl, isActive);
                console.log("✅ 웹스퀘어 탭 컨트롤에 탭 추가 완료:", tabId);
                return;
            }
        }
        
        // 재시도 로직
        if (attempt < maxAttempts - 1) {
            setTimeout(function() {
                scwin.addTabToControlWithRetry(tabId, tabTitle, tabUrl, isActive, attempt + 1);
            }, 300);
        } else {
            console.error("❌ 탭 추가 실패 - 최대 시도 횟수 초과");
            // 마지막 시도로 메인 콘텐츠만 변경
            if (wfr_mainContent && tabUrl) {
                wfr_mainContent.setSrc(tabUrl);
                console.log("✅ 메인 콘텐츠만 변경:", tabUrl);
            }
        }
        
    } catch (e) {
        console.error("탭 추가 오류:", e);
        if (attempt < maxAttempts - 1) {
            setTimeout(function() {
                scwin.addTabToControlWithRetry(tabId, tabTitle, tabUrl, isActive, attempt + 1);
            }, 300);
        } else {
            console.error("❌ 모든 재시도 실패");
            // 마지막 시도로 메인 콘텐츠만 변경
            if (wfr_mainContent && tabUrl) {
                wfr_mainContent.setSrc(tabUrl);
                console.log("✅ 메인 콘텐츠만 변경:", tabUrl);
            }
        }
    }
};

// 메뉴 ID에 해당하는 탭 제목 반환
scwin.getTabTitleFromMenuId = function(menuId) {
    var menuTitleMap = {
        'menu_duty_manage': '근무자 관리',
        'menu_schedule_manage': '스케줄 관리',
        'menu_my_schedule': '내 스케줄 보기',
        'menu_work_input': '희망 근무 입력',
        'menu_nurse': '간호사 관리',
        'menu_duty': '희망 근무 입력',
        'menu_schedule': '내 스케줄 보기'
    };
    return menuTitleMap[menuId] || '새 탭';
};

// 탭 컨트롤에 탭 추가
scwin.addTabToControl = function(tabId, tabTitle, tabUrl, isActive) {
    try {
        if (wfr_tabControl && wfr_tabControl.getWindow) {
            var tabControlWindow = wfr_tabControl.getWindow();
            if (tabControlWindow && tabControlWindow.scwin && tabControlWindow.scwin.addTab) {
                tabControlWindow.scwin.addTab(tabId, tabTitle, tabUrl, isActive);
                console.log("✅ 탭 컨트롤에 탭 추가 완료:", tabId);
            } else {
                console.warn("탭 컨트롤이 준비되지 않았습니다.");
            }
        }
    } catch (e) {
        console.error("탭 컨트롤 탭 추가 오류:", e);
    }
};

// 탭에서 메인 콘텐츠 변경
scwin.changeMainContentFromTab = function(tabUrl) {
    try {
        if (wfr_mainContent && tabUrl) {
            wfr_mainContent.setSrc(tabUrl);
            console.log("✅ 탭에서 메인 콘텐츠 변경:", tabUrl);
        }
    } catch (e) {
        console.error("탭에서 메인 콘텐츠 변경 오류:", e);
    }
};

// 탭 닫기 이벤트 처리
scwin.onTabClosed = function(tabId) {
    try {
        console.log("탭 닫기 이벤트 처리:", tabId);
        
        // 탭이 닫힌 후 다른 탭이 활성화되었는지 확인
        setTimeout(async function() {
            if (wfr_tabControl && wfr_tabControl.getWindow) {
                var tabControlWindow = wfr_tabControl.getWindow();
                if (tabControlWindow && tabControlWindow.scwin) {
                    try {
                        var activeTab = await tabControlWindow.scwin.findTabById(tabId);
                        if (!activeTab) {
                            // 닫힌 탭이므로 다른 탭을 활성화
                            if (tabControlWindow.scwin.activateTab) {
                                // 첫 번째 탭을 활성화
                                await tabControlWindow.scwin.activateTab("menu_duty_manage");
                                scwin.changeMainContentFromTab("/InsWebApp/ui/nurse/NurseManage.xml");
                            }
                        }
                    } catch (e) {
                        console.error("탭 닫기 후 활성화 처리 오류:", e);
                    }
                }
            }
        }, 100);
        
    } catch (e) {
        console.error("탭 닫기 이벤트 처리 오류:", e);
    }
};

// 재시도 로직이 포함된 사이드메뉴 활성 메뉴 업데이트
scwin.updateSideMenuActiveMenuWithRetry = function(menuId, attempt) {
    var maxAttempts = 10;
    attempt = attempt || 0;
    
    console.log("사이드메뉴 활성 메뉴 업데이트 시도:", (attempt + 1) + "/" + maxAttempts, "메뉴ID:", menuId);
    
    try {
        if (wfr_sideMenu && wfr_sideMenu.getWindow) {
            var sideMenuWindow = wfr_sideMenu.getWindow();
            if (sideMenuWindow && sideMenuWindow.scwin) {
                // setActiveMenu 함수가 있는지 확인
                if (sideMenuWindow.scwin.setActiveMenu) {
                    sideMenuWindow.scwin.setActiveMenu(menuId);
                    console.log("✅ 사이드메뉴 활성 메뉴 업데이트 완료:", menuId);
                    return;
                } else {
                    console.log("setActiveMenu 함수가 없습니다. 직접 DOM 조작 시도...");
                    // 직접 DOM 조작으로 활성 메뉴 설정
                    scwin.setActiveMenuDirectly(menuId);
                    return;
                }
            }
        }
        
        // 재시도 로직
        if (attempt < maxAttempts - 1) {
            setTimeout(function() {
                scwin.updateSideMenuActiveMenuWithRetry(menuId, attempt + 1);
            }, 200);
        } else {
            console.error("❌ 사이드메뉴 활성 메뉴 업데이트 실패 - 최대 시도 횟수 초과");
            // 마지막 시도로 직접 DOM 조작
            scwin.setActiveMenuDirectly(menuId);
        }
        
    } catch (e) {
        console.error("사이드메뉴 업데이트 오류:", e);
        if (attempt < maxAttempts - 1) {
            setTimeout(function() {
                scwin.updateSideMenuActiveMenuWithRetry(menuId, attempt + 1);
            }, 200);
        } else {
            console.error("❌ 모든 재시도 실패");
        }
    }
};

// 직접 DOM 조작으로 활성 메뉴 설정
scwin.setActiveMenuDirectly = function(menuId) {
    try {
        if (wfr_sideMenu && wfr_sideMenu.getWindow) {
            var sideMenuWindow = wfr_sideMenu.getWindow();
            if (sideMenuWindow && sideMenuWindow.document) {
                // 모든 메뉴 아이템에서 active 클래스 제거
                var allMenuItems = sideMenuWindow.document.querySelectorAll('.menu-item, .menu-link, [data-menu-id]');
                allMenuItems.forEach(function(item) {
                    item.classList.remove('active', 'selected', 'current');
                });
                
                // 해당 메뉴 아이템에 active 클래스 추가
                var targetMenuItem = sideMenuWindow.document.querySelector('[data-menu-id="' + menuId + '"]') ||
                                   sideMenuWindow.document.querySelector('[id="' + menuId + '"]') ||
                                   sideMenuWindow.document.querySelector('#' + menuId);
                
                if (targetMenuItem) {
                    targetMenuItem.classList.add('active', 'selected', 'current');
                    console.log("✅ 직접 DOM 조작으로 활성 메뉴 설정 완료:", menuId);
                } else {
                    console.warn("⚠️ 대상 메뉴 아이템을 찾을 수 없습니다:", menuId);
                }
            }
        }
    } catch (e) {
        console.error("직접 DOM 조작 오류:", e);
    }
};

// 기존 함수 유지 (하위 호환성)
scwin.updateSideMenuActiveMenu = function(menuId) {
    scwin.updateSideMenuActiveMenuWithRetry(menuId, 0);
};

scwin.changeMainContent = function(src, menuId) {
    try {
        if (wfr_mainContent) {
            wfr_mainContent.setSrc(src);
            console.log("✅ 메인 콘텐츠 변경:", src);
            
            // 메뉴 ID가 제공된 경우 활성 메뉴 업데이트
            if (menuId) {
                scwin.updateSideMenuActiveMenuWithRetry(menuId, 0);
                scwin.currentActiveMenuId = menuId;
            }
        }
    } catch (e) {
        console.error("메인 콘텐츠 변경 오류:", e);
    }
};

// URL 기반으로 메뉴 ID를 찾는 함수
scwin.getMenuIdFromUrl = function(url) {
    var menuUrlMap = {
        '/InsWebApp/ui/nurse/NurseManage.xml': 'menu_nurse',
        '/InsWebApp/ui/duty/HopeWorkEntry.xml': 'menu_duty',
        '/InsWebApp/ui/schedule/myschedule.xml': 'menu_schedule',
        '/InsWebApp/ui/duty/HopeWorkEntry.xml': 'menu_work_input',
        '/InsWebApp/ui/schedule/myschedule.xml': 'menu_my_schedule'
    };
    
    return menuUrlMap[url] || null;
};

// 현재 URL에 해당하는 메뉴 활성화
scwin.activateMenuForCurrentUrl = function() {
    try {
        if (wfr_mainContent) {
            var currentSrc = wfr_mainContent.getSrc();
            var menuId = scwin.getMenuIdFromUrl(currentSrc);
            
            if (menuId) {
                console.log("현재 URL에 해당하는 메뉴 활성화:", currentSrc, "->", menuId);
                scwin.updateSideMenuActiveMenuWithRetry(menuId, 0);
                scwin.currentActiveMenuId = menuId;
            }
        }
    } catch (e) {
        console.error("현재 URL 메뉴 활성화 오류:", e);
    }
};

// postMessage 이벤트 리스너 설정
scwin.setupPostMessageListener = function() {
    window.addEventListener('message', function(event) {
        console.log("postMessage 수신:", event.data);
        
        if (event.data && event.data.action === 'toggleSidebar') {
            console.log("postMessage를 통한 사이드바 토글 요청");
            scwin.toggleSidebar();
        }
    });
    
    console.log("✅ postMessage 리스너 설정 완료");
};
]]></script>
    </head>
    <body ev:onpageload="scwin.onpageload">
        
        <xf:group style="width:100%;height:100vh;display:flex;flex-direction:column;margin:0;padding:0;" id="grp_mainContainer">
            
            <!-- 헤더 영역 (90px 고정) -->
            <xf:group style="width:100%;height:90px;position:fixed;top:0;left:0;z-index:1001;" id="grp_headerArea">
                <w2:wframe id="wfr_header" style="width:100%;height:100%;" src="/InsWebApp/ui/cmmn/header.xml"/>
            </xf:group>
            
            <!-- 메인 콘텐츠 영역 (헤더 아래) -->
            <xf:group style="width:100%;height:calc(100vh - 90px);margin-top:90px;display:flex;" id="grp_contentArea">
                
                <!-- 사이드메뉴 영역 (250px 고정) -->
                <xf:group style="width:250px;height:100%;position:fixed;left:0;z-index:1000;margin-top:-90px;" id="grp_sideMenuArea" class="sidebar-expanded">
                    <w2:wframe id="wfr_sideMenu" style="width:100%;height:100%;" src="/InsWebApp/ui/cmmn/sidebar.xml"/>
                </xf:group>
                
                <!-- 메인 콘텐츠 (나머지 공간 100% 활용, 세로 스크롤 추가) -->
                <xf:group
                	style="margin-left:250px;width:calc(100% - 250px);height:100%;background-color:#f5f7fa;overflow-y:auto;overflow-x:hidden;"
                	id="grp_mainContent" class="main-content-expanded">
                	<w2:wframe style="height: 50px;border:none;margin:0;padding:0;background:#f8f9fa;" id="wfr_tabControl" src="/InsWebApp/ui/cmmn/tabControl.xml"/>
                	<w2:wframe id="wfr_mainContent" style="width:100%;height:calc(100% - 50px);min-height:calc(100% - 50px);border:none;margin:0;padding:0;"
                		src="/InsWebApp/ui/nurse/NurseManage.xml"/>
                </xf:group>

            </xf:group>
            
        </xf:group>
    </body>
</html>