<?xml version="1.0" encoding="UTF-8"?>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:ev="http://www.w3.org/2001/xml-events" xmlns:w2="http://www.inswave.com/websquare"
	xmlns:xf="http://www.w3.org/2002/xforms">
	<head>
		<w2:type>DEFAULT</w2:type>
		<w2:buildDate />
		<w2:MSA />
		<xf:model>
			<xf:instance>
				<data xmlns="" />
			</xf:instance>
			<w2:dataCollection baseNode="map">
				<w2:dataMap baseNode="map" id="dmp_nurseVo">
					<w2:keyInfo>
						<w2:key id="nurseName" name="근무자명" dataType="text"></w2:key>
						<w2:key id="position" name="직급" dataType="text"></w2:key>
						<w2:key id="career" name="연차" dataType="number"></w2:key>
						<w2:key id="specialNote" name="특이사항" dataType="text"></w2:key>
						<w2:key id="hireDate" name="입사일" dataType="text"></w2:key>
						<w2:key id="scNurseName" name="근무자명검색" dataType="text"></w2:key>
						<w2:key id="scPosition" name="직급검색" dataType="text"></w2:key>
					</w2:keyInfo>
				</w2:dataMap>
				<w2:dataList baseNode="list" repeatNode="map" id="dlt_nurseList" saveRemovedData="true">
					<w2:columnInfo>
						<w2:column id="chk_select" name="선택" dataType="text"></w2:column>
						<w2:column id="nurseName" name="근무자명" dataType="text"></w2:column>
						<w2:column id="position" name="직급" dataType="text"></w2:column>
						<w2:column id="career" name="연차" dataType="text"></w2:column>
						<w2:column id="specialNote" name="특이사항" dataType="text"></w2:column>
						<w2:column id="hireDate" name="입사일" dataType="text"></w2:column>
					</w2:columnInfo>
				</w2:dataList>
			</w2:dataCollection>
			<w2:workflowCollection></w2:workflowCollection>
			<xf:submission id="sbm_selectNurseList" ref='data:json,{"id":"dmp_nurseVo","key":"elData"}' target="data:dlt_nurseList"
				action="/InsWebApp/list.pwkjson" method="post" mediatype="application/json" encoding="UTF-8" instance="" replace="" errorHandler=""
				customHandler="" mode="asynchronous" processMsg="간호사 목록을 조회 중입니다." ev:submit="" ev:submitdone="scwin.sbm_selectNurseList_submitdone"
				ev:submiterror="scwin.sbm_selectNurseList_submiterror" abortTrigger="">
			</xf:submission>
			<xf:submission id="sbm_selectNurse" ref='' target=""
				action="/InsWebApp/view.pwkjson" method="post" mediatype="application/json" encoding="UTF-8" instance="" replace="" errorHandler=""
				customHandler="" mode="asynchronous" processMsg="간호사 정보를 조회 중입니다." ev:submit="" ev:submitdone="scwin.sbm_selectNurse_submitdone"
				ev:submiterror="" abortTrigger="" send-type="json">
			</xf:submission>
			<xf:submission id="sbm_insertNurse" ref='data:json,{"id":"dmp_nurseVo","key":"nurseVo"}' target=""
				action="/InsWebApp/insert.pwkjson" method="post" mediatype="application/json" encoding="UTF-8" instance="" replace="" errorHandler=""
				customHandler="" mode="asynchronous" processMsg="간호사 정보를 등록 중입니다." ev:submit="" ev:submitdone="scwin.sbm_insertNurse_submitdone"
				ev:submiterror="scwin.sbm_insertNurse_submiterror" abortTrigger="">
			</xf:submission>
			<xf:submission id="sbm_updateNurse" ref='data:json,{"id":"dmp_nurseVo","key":"nurseVo"}' target=""
				action="/InsWebApp/update.pwkjson" method="post" mediatype="application/json" encoding="UTF-8" instance="" replace="" errorHandler=""
				customHandler="" mode="asynchronous" processMsg="간호사 정보를 수정 중입니다." ev:submit="" ev:submitdone="scwin.sbm_updateNurse_submitdone"
				ev:submiterror="" abortTrigger="">
			</xf:submission>
			<xf:submission id="sbm_deleteNurse" ref='data:json,{"id":"dmp_nurseVo","key":"nurseVo"}' target=""
				action="/InsWebApp/delete.pwkjson" method="post" mediatype="application/json" encoding="UTF-8" instance="" replace="" errorHandler=""
				customHandler="" mode="asynchronous" processMsg="간호사 정보를 삭제 중입니다." ev:submit="" ev:submitdone="scwin.sbm_deleteNurse_submitdone"
				ev:submiterror="" abortTrigger="">
			</xf:submission>
			<xf:submission id="sbm_insertNurseList" action="/InsWebApp/insertList.pwkjson" method="post" mediatype="application/json" ref='data:json,{"id":"dlt_nurseList","key":"elData"}'
				target="" encoding="UTF-8" instance="" replace="" errorHandler="" customHandler="" mode="asynchronous" processMsg="다중 등록 진행중..."
				ev:submit="" ev:submitdone="scwin.sbm_insertNurseList_submitdone" ev:submiterror="" abortTrigger="">
			</xf:submission>
		</xf:model>
		<w2:layoutInfo>
		</w2:layoutInfo>
		<w2:publicInfo>
		</w2:publicInfo>
		<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
		<script type="text/javascript" lazy="false"><![CDATA[
// scwin 객체 초기화 확인 및 생성
if (typeof scwin === 'undefined') {
    var scwin = {};
}

// 글로벌 변수 안전하게 초기화
scwin.nurseCounter = scwin.nurseCounter || 28; // 다음 순번용 카운터
scwin.nurseData = scwin.nurseData || []; // 간호사 데이터 저장용
scwin.isExcelUploaded = scwin.isExcelUploaded || false; // 엑셀 업로드 여부

scwin.onpageload = function (e) {
    // 폼 초기화
    scwin.fn_clearForm();

    // 저장된 데이터 로드
    scwin.fn_loadSavedData();

    // WebSquare 컴포넌트 완전 로드 대기 후 날짜 설정
    scwin.waitForWebSquareComponents();

    // 현재 날짜 설정 (즉시 실행 - 백업용)
    scwin.fn_setCurrentDate();

    // DOM이 완전히 로드된 후 다시 한번 날짜 설정 (안전장치)
    setTimeout(function () {
        scwin.fn_setCurrentDate();
    }, 100);

    // 추가 안전장치 - 500ms 후
    setTimeout(function () {
        scwin.fn_setCurrentDate();
    }, 500);

    // 추가 안전장치 - 1초 후
    setTimeout(function () {
        scwin.fn_setCurrentDate();
    }, 1000);

    // 추가 안전장치 - 2초 후
    setTimeout(function () {
        scwin.fn_setCurrentDate();
    }, 2000);

    // 추가 안전장치 - 3초 후
    setTimeout(function () {
        scwin.fn_setCurrentDate();
    }, 3000);

    // 현재 날짜 자동 업데이트 (1분마다)
    setInterval(function () {
        scwin.fn_setCurrentDate();
    }, 60000); // 60초 = 1분

    // 엑셀 업로드 상태에 따른 버튼 상태 설정
    if (scwin.isExcelUploaded) {
        scwin.fn_disableUploadButton();
    }

};

// DOM 완전 로드 이벤트 리스너 추가
document.addEventListener('DOMContentLoaded', function () {
    scwin.fn_setCurrentDate();
});

// window load 이벤트 리스너 추가
window.addEventListener('load', function () {
    scwin.fn_setCurrentDate();
});

// WebSquare 특화 이벤트 리스너
if (typeof w2 !== 'undefined' && w2.onload) {
    w2.onload = function () {
        scwin.fn_setCurrentDate();
    };
}

// 즉시 실행 함수 (IIFE) - 페이지 로드와 관계없이 즉시 실행
(function () {
    // 기본 초기화
    if (typeof scwin === 'undefined') {
        var scwin = {};
    }

    // 글로벌 변수 안전하게 초기화
    scwin.nurseCounter = scwin.nurseCounter || 28;
    scwin.nurseData = scwin.nurseData || [];
    scwin.isExcelUploaded = scwin.isExcelUploaded || false;

    // 현재 날짜 설정 함수 정의
    scwin.fn_setCurrentDate = function () {
        var now = new Date();
        var year = now.getFullYear();
        var month = String(now.getMonth() + 1).padStart(2, '0');
        var day = String(now.getDate()).padStart(2, '0');
        var currentDate = year + "-" + month + "-" + day;

        try {
            // 방법 1: WebSquare 컴포넌트로 직접 접근
            if (txt_currentDate && txt_currentDate.setValue) {
                txt_currentDate.setValue(currentDate);
                txt_currentDate.setLabel(currentDate);
                return;
            }

            // 방법 2: DOM 요소로 직접 접근
            var dateElement = document.getElementById('txt_currentDate');
            if (dateElement) {
                dateElement.textContent = currentDate;
                dateElement.setAttribute('label', currentDate);
                return;
            }

            // 방법 3: WebSquare ID 패턴으로 검색
            var w2Element = document.getElementById('mf_txt_currentDate');
            if (w2Element) {
                w2Element.textContent = currentDate;
                w2Element.setAttribute('label', currentDate);
                return;
            }

        } catch (e) {
            // 날짜 설정 오류 처리
        }
    };

    // 즉시 날짜 설정 시도
    scwin.fn_setCurrentDate();

    // 1초 후 다시 시도
    setTimeout(function () {
        scwin.fn_setCurrentDate();
    }, 1000);

    // 3초 후 다시 시도
    setTimeout(function () {
        scwin.fn_setCurrentDate();
    }, 3000);
})();

// WebSquare 컴포넌트 완전 로드 대기 함수
scwin.waitForWebSquareComponents = function () {
    var attempts = 0;
    var maxAttempts = 50; // 최대 5초 대기

    var checkComponents = function () {
        attempts++;

        // txt_currentDate 컴포넌트가 완전히 로드되었는지 확인
        if (typeof txt_currentDate !== 'undefined' && txt_currentDate && txt_currentDate.setValue) {
            scwin.fn_setCurrentDate();
            return;
        }

        if (attempts < maxAttempts) {
            setTimeout(checkComponents, 100);
        } else {
            // 타임아웃되어도 시도
            scwin.fn_setCurrentDate();
        }
    };

    checkComponents();
};

// 현재 날짜 설정
scwin.fn_setCurrentDate = function () {
    var now = new Date();
    var year = now.getFullYear();
    var month = String(now.getMonth() + 1).padStart(2, '0');
    var day = String(now.getDate()).padStart(2, '0');
    var currentDate = year + "-" + month + "-" + day;

    try {
        // 방법 1: WebSquare 컴포넌트로 직접 접근
        if (txt_currentDate && txt_currentDate.setValue) {
            txt_currentDate.setValue(currentDate);
            txt_currentDate.setLabel(currentDate);
            return;
        }

        // 방법 2: DOM 요소로 직접 접근
        var dateElement = document.getElementById('txt_currentDate');
        if (dateElement) {
            dateElement.textContent = currentDate;
            dateElement.setAttribute('label', currentDate);
            return;
        }

        // 방법 3: WebSquare ID 패턴으로 검색
        var w2Element = document.getElementById('mf_txt_currentDate');
        if (w2Element) {
            w2Element.textContent = currentDate;
            w2Element.setAttribute('label', currentDate);
            return;
        }

        // 방법 4: 모든 가능한 ID 패턴으로 검색
        var allPossibleIds = [
            'txt_currentDate',
            'mf_txt_currentDate',
            'wfr_txt_currentDate',
            'w2_txt_currentDate'
        ];

        for (var i = 0; i < allPossibleIds.length; i++) {
            var element = document.getElementById(allPossibleIds[i]);
            if (element) {
                element.textContent = currentDate;
                element.setAttribute('label', currentDate);
                return;
            }
        }

        // 방법 5: querySelector로 부분 매칭 검색
        var partialElement = document.querySelector('[id*="currentDate"]');
        if (partialElement) {
            partialElement.textContent = currentDate;
            partialElement.setAttribute('label', currentDate);
            return;
        }

    } catch (e) {
        // 날짜 설정 오류 처리
    }
};

// 업로드 버튼 비활성화
scwin.fn_disableUploadButton = function () {
    if (btn_excel) {
        btn_excel.setDisabled(true);
        btn_excel.setStyle("background-color", "#ccc");
        btn_excel.setStyle("color", "#666");
        btn_excel.setStyle("cursor", "not-allowed");
    }
};

// 업로드 버튼 활성화
scwin.fn_enableUploadButton = function () {
    if (btn_excel) {
        btn_excel.setDisabled(false);
        btn_excel.setStyle("background-color", "");
        btn_excel.setStyle("color", "");
        btn_excel.setStyle("cursor", "");
    }
};

// 저장된 데이터 로드 (localStorage 사용)
scwin.fn_loadSavedData = function () {
    try {
        // localStorage에서 데이터 로드
        var savedData = localStorage.getItem("nurseManageData");
        var uploadStatus = localStorage.getItem("nurseExcelUploaded");

        if (savedData) {
            var parsedData = JSON.parse(savedData);
            if (Array.isArray(parsedData) && parsedData.length > 0) {
                scwin.nurseData = parsedData;


                // nurseCounter 재설정 (기존 데이터 수 + 1)
                scwin.nurseCounter = scwin.nurseData.length + 1;

            } else {

                scwin.nurseData = [];
                scwin.nurseCounter = 1;
            }
        } else {
            // 저장된 데이터가 없으면 빈 배열로 초기화
            scwin.nurseData = [];
            scwin.nurseCounter = 1;
        }

        // 엑셀 업로드 상태 복원
        if (uploadStatus === "true") {
            scwin.isExcelUploaded = true;

        } else {
            scwin.isExcelUploaded = false;
        }

    } catch (e) {

        Swal.fire({
            icon: 'error',
            title: '데이터 로드 오류',
            text: '저장된 데이터를 불러오는 중 오류가 발생했습니다.',
            html: '데이터가 초기화됩니다.',
            confirmButtonText: '확인',
            confirmButtonColor: '#1C3D6B'
        });
        scwin.nurseData = [];
        scwin.isExcelUploaded = false;
        scwin.nurseCounter = 1;

        // 문제가 있는 데이터 제거
        localStorage.removeItem("nurseManageData");
        localStorage.removeItem("nurseExcelUploaded");
    }
};

// 간호사 목록 조회
scwin.fn_selectNurseList = function () {
    try {


        // 검색 조건 설정
        var searchData = {
            scNurseName: dmp_nurseVo.get("scNurseName") || "",
            scPosition: dmp_nurseVo.get("scPosition") || ""
        };



        // 검색 조건을 dataMap에 설정
        dmp_nurseVo.set("scNurseName", searchData.scNurseName);
        dmp_nurseVo.set("scPosition", searchData.scPosition);

        // 서브미션 실행
        $c.sbm.execute(sbm_selectNurseList);

    } catch (error) {

        Swal.fire({
            icon: 'error',
            title: '조회 오류',
            text: '데이터 조회 중 오류가 발생했습니다.',
            confirmButtonText: '확인',
            confirmButtonColor: '#1C3B6B'
        });
    }
};

// 간호사 목록 조회 완료 (ProWorks 연동)
scwin.sbm_selectNurseList_submitdone = function (e) {
    dlt_nurseList.setJSON(e.responseJSON.nurseListVo.nurseVoList);
    /* Swal.fire({
        icon: 'success',
        title: '전체조회 완료',
        text: '전체조회 완료!\n총 ' + e.responseJSON.nurseListVo.nurseVoList.length + '건의 간호사 데이터가 조회되었습니다.',
        confirmButtonText: '확인',
        confirmButtonColor: '#1B73E8'
    }); */

};

// 간호사 목록 조회 에러 처리
scwin.sbm_selectNurseList_submiterror = function (e) {

    Swal.fire({
        icon: 'error',
        title: '조회 실패',
        text: '간호사 목록 조회 중 오류가 발생했습니다. (상태: ' + e.status + ')',
        confirmButtonText: '확인',
        confirmButtonColor: '#1C3D6B'
    });
};

// 간호사 상세 조회
scwin.fn_selectNurse = function (nurseName, position, career, specialNote, hireDate) {
    try {


        // 조회할 간호사 정보 설정
        dmp_nurseVo.set("nurseName", nurseName);
        dmp_nurseVo.set("position", position);
        dmp_nurseVo.set("career", career);
        dmp_nurseVo.set("specialNote", specialNote);
        dmp_nurseVo.set("hireDate", hireDate);

    } catch (error) {

        Swal.fire({
            icon: 'error',
            title: '조회 오류',
            text: '간호사 정보 조회 중 오류가 발생했습니다.',
            confirmButtonText: '확인',
            confirmButtonColor: '#1C3B6B'
        });
    }
};

// 간호사 상세 조회 완료 (ProWorks 연동)
scwin.sbm_selectNurse_submitdone = function (e) {
    try {
        var responseData = e.responseJSON;

        if (responseData && responseData.elHeader) {
            var elHeader = responseData.elHeader;

            if (elHeader.resSuc === true) {
                var nurseInfo = responseData.nurseVo;


                // 폼에 데이터 설정
                dmp_nurseVo.setJSON(nurseInfo);

                Swal.fire({
                    icon: 'success',
                    title: '조회 완료',
                    text: '간호사 정보가 조회되었습니다.',
                    confirmButtonText: '확인',
                    confirmButtonColor: '#1C3D6B'
                });

            } else {
                Swal.fire({
                    icon: 'error',
                    title: '조회 실패',
                    text: elHeader.resMsg || '간호사 정보 조회에 실패했습니다.',
                    confirmButtonText: '확인',
                    confirmButtonColor: '#1C3D6B'
                });
            }
        } else {
            Swal.fire({
                icon: 'error',
                title: '응답 오류',
                text: '서버 응답 형식이 올바르지 않습니다.',
                confirmButtonText: '확인',
                confirmButtonColor: '#1C3D6B'
            });
        }

    } catch (error) {
        Swal.fire({
            icon: 'error',
            title: '처리 오류',
            text: '응답 데이터 처리 중 오류가 발생했습니다.',
            confirmButtonText: '확인',
            confirmButtonColor: '#1C3D6B'
        });
    }
};

// 간호사 등록 완료 (ProWorks 연동)
scwin.sbm_insertNurse_submitdone = function (e) {
    $c.sbm.execute(sbm_selectNurseList);
    try {
        var responseData = e.responseJSON;

        if (responseData && responseData.elHeader) {
            var elHeader = responseData.elHeader;

            if (elHeader.resSuc === true) {

                // 폼 초기화
                scwin.fn_clearForm();

                Swal.fire({
                    icon: 'success',
                    title: '등록 완료',
                    text: '간호사 정보가 등록되었습니다.',
                    confirmButtonText: '확인',
                    confirmButtonColor: '#1C3D6B'
                });

            } else {
                Swal.fire({
                    icon: 'error',
                    title: '등록 실패',
                    text: elHeader.resMsg || '간호사 등록에 실패했습니다.',
                    confirmButtonText: '확인',
                    confirmButtonColor: '#1C3D6B'
                });
            }
        } else {
            Swal.fire({
                icon: 'error',
                title: '응답 오류',
                text: '서버 응답 형식이 올바르지 않습니다.',
                confirmButtonText: '확인',
                confirmButtonColor: '#1C3D6B'
            });
        }

    } catch (error) {
        Swal.fire({
            icon: 'error',
            title: '처리 오류',
            text: '응답 데이터 처리 중 오류가 발생했습니다.',
            confirmButtonText: '확인',
            confirmButtonColor: '#1C3D6B'
        });
    }
};

// 간호사 수정
scwin.fn_updateNurse = function () {
    try {


        // 폼 검증
        if (!scwin.fn_validateForm()) {
            return;
        }

        var nurseName = dmp_nurseVo.get("nurseName");
        if (!nurseName) {
            Swal.fire({
                icon: 'warning',
                title: '선택 필요',
                text: '수정할 간호사를 선택해주세요.',
                confirmButtonText: '확인',
                confirmButtonColor: '#1C3B6B'
            });
            return;
        }

        // 수정할 데이터 준비
        var nurseData = {
            nurseName: nurseName,
            position: dmp_nurseVo.get("position"),
            career: dmp_nurseVo.get("career") || "",
            specialNote: dmp_nurseVo.get("specialNote") || "",
            hireDate: dmp_nurseVo.get("hireDate") || scwin.fn_getCurrentDate()
        };



        // ProWorks 서버 호출
        $c.sbm.execute(sbm_updateNurse);

    } catch (error) {

        Swal.fire({
            icon: 'error',
            title: '수정 오류',
            text: '간호사 수정 중 오류가 발생했습니다.',
            confirmButtonText: '확인',
            confirmButtonColor: '#1C3B6B'
        });
    }
};

// 간호사 수정 완료 (ProWorks 연동)
scwin.sbm_updateNurse_submitdone = function (e) {
    Swal.fire({
        icon: 'success',
        title: '수정 완료',
        text: '간호사 정보가 수정되었습니다.',
        confirmButtonText: '확인',
        confirmButtonColor: '#1C3D6B'
    });
    $c.sbm.execute(sbm_selectNurseList);
};

// 간호사 삭제
scwin.fn_deleteNurse = function (nurseName) {
    try {


        // 삭제할 간호사 정보 설정
        dmp_nurseVo.set("nurseName", nurseName);

        // ProWorks 서버 호출
        $c.sbm.execute(sbm_deleteNurse);

    } catch (error) {

        Swal.fire({
            icon: 'error',
            title: '삭제 오류',
            text: '간호사 삭제 중 오류가 발생했습니다.',
            confirmButtonText: '확인',
            confirmButtonColor: '#1C3B6B'
        });
    }

};

// 간호사 삭제 완료 (ProWorks 연동)
scwin.sbm_deleteNurse_submitdone = function (e) {
    Swal.fire({
        icon: 'success',
        title: '삭제 완료',
        text: '간호사 정보가 삭제되었습니다.',
        confirmButtonText: '확인',
        confirmButtonColor: '#1C3D6B'
    });
    $c.sbm.execute(sbm_selectNurseList);
};

// 검색 버튼 클릭
scwin.btn_search_onclick = function () {
    var scNurseName = dmp_nurseVo.get("scNurseName") || "";
    var scPosition = dmp_nurseVo.get("scPosition") || "";

    // 검색 조건이 하나도 없으면 안내
    if (scNurseName.trim() === "" && scPosition.trim() === "") {
        Swal.fire({
            icon: 'info',
            title: '검색 조건 필요',
            html: '검색 조건을 입력해주세요.',
            confirmButtonText: '확인',
            confirmButtonColor: '#1B73E8'
        });
        return;
    }

    // 검색 조건을 dataMap에 설정
    dmp_nurseVo.set("scNurseName", scNurseName.trim());
    dmp_nurseVo.set("scPosition", scPosition.trim());
    


    // 클라이언트 사이드 검색 실행
    scwin.fn_searchNurses(scNurseName.trim(), scPosition.trim());
};

// 클라이언트 사이드 검색 함수
scwin.fn_searchNurses = function(searchNurseName, searchPosition) {
    try {
            var allNurses = [];
    var rowCount = dlt_nurseList.getRowCount();
        
        // 모든 데이터 수집
        for (var i = 0; i < rowCount; i++) {
            try {
                var nurseName = dlt_nurseList.getCellData(i, "nurseName") || "";
                var position = dlt_nurseList.getCellData(i, "position") || "";
                var career = dlt_nurseList.getCellData(i, "career") || "";
                var specialNote = dlt_nurseList.getCellData(i, "specialNote") || "";
                var hireDate = dlt_nurseList.getCellData(i, "hireDate") || "";
                var chk_select = dlt_nurseList.getCellData(i, "chk_select") || "0";
                
                // 빈 데이터가 아닌 경우만 추가
                if (nurseName && position) {
                    allNurses.push({
                        chk_select: chk_select,
                        nurseName: nurseName,
                        position: position,
                        career: career,
                        specialNote: specialNote,
                        hireDate: hireDate
                    });
                }
            } catch (error) {
                // 행 데이터 추출 오류 처리
            }
        }
        
        // 검색 조건에 맞는 데이터 필터링
        var filteredNurses = allNurses.filter(function(nurse) {
            var nurseNameMatch = true;
            var positionMatch = true;
            
            // 근무자명 검색
            if (searchNurseName && searchNurseName.trim() !== "") {
                nurseNameMatch = nurse.nurseName.toLowerCase().includes(searchNurseName.toLowerCase());
            }
            
            // 직급 검색
            if (searchPosition && searchPosition.trim() !== "") {
                positionMatch = nurse.position.toLowerCase().includes(searchPosition.toLowerCase());
            }
            
            // 둘 다 입력된 경우 AND 조건, 하나만 입력된 경우 해당 조건만 확인
            if (searchNurseName && searchPosition) {
                return nurseNameMatch && positionMatch;
            } else if (searchNurseName) {
                return nurseNameMatch;
            } else if (searchPosition) {
                return positionMatch;
            } else {
                return true; // 검색 조건이 없으면 모든 데이터 반환
            }
        });
        
        // 검색 결과를 그리드에 표시
        if (typeof dlt_nurseList !== 'undefined' && dlt_nurseList.setJSON) {
            dlt_nurseList.setJSON(filteredNurses);
        }
        
        // 검색 결과 안내
        var resultCount = filteredNurses.length;

        if (resultCount === 0) {
            Swal.fire({
                icon: 'warning',
                title: '검색 결과 없음',
                html: '검색 결과가 없습니다.<br>• 검색어를 다시 확인해주세요.<br>• 부분 검색이 가능하니 더 짧은 단어로 검색해보세요.',
                confirmButtonText: '확인',
                confirmButtonColor: '#1B73E8'
            });
        } else {
            Swal.fire({
                icon: 'success',
                title: '검색 완료',
                html: '검색이 완료되었습니다.<br>총 ' + resultCount + '건의 결과가 조회되었습니다.',
                confirmButtonText: '확인',
                confirmButtonColor: '#1B73E8'
            });
        }
        
    } catch (error) {
        Swal.fire({
            icon: 'error',
            title: '검색 오류',
            text: '검색 처리 중 오류가 발생했습니다.',
            confirmButtonText: '확인',
            confirmButtonColor: '#1C3D6B'
        });
    }
};

// 전체조회 버튼 클릭
scwin.btn_list_all_onclick = function (e) {

    $c.sbm.execute(sbm_selectNurseList);

};

// 초기화 버튼 클릭
scwin.btn_reset_onclick = function () {
    scwin.fn_clearForm();
    scwin.fn_selectNurseList();

};

// 등록 버튼 클릭
scwin.btn_insert_onclick = function () {
    if (scwin.fn_validateForm()) {
        try {
    

            // 폼 검증
            if (!scwin.fn_validateForm()) {
                return;
            }

            // 등록할 데이터 준비
            var nurseData = {
                nurseName: dmp_nurseVo.get("nurseName"),
                position: dmp_nurseVo.get("position"),
                career: dmp_nurseVo.get("career") || "",
                specialNote: dmp_nurseVo.get("specialNote") || "",
                hireDate: dmp_nurseVo.get("hireDate") || scwin.fn_getCurrentDate()
            };



            // 데이터를 dataMap에 설정
            dmp_nurseVo.setJSON(nurseData);

            // ProWorks 서버 호출
            $c.sbm.execute(sbm_insertNurse);

        } catch (error) {
            Swal.fire({
                icon: 'error',
                title: '등록 오류',
                text: '간호사 등록 중 오류가 발생했습니다.',
                confirmButtonText: '확인',
                confirmButtonColor: '#1C3B6B'
            });
        }
    }
};

// 수정 버튼 클릭
scwin.btn_update_onclick = function () {
    if (scwin.fn_validateForm()) {
        scwin.fn_updateNurse();
    }
};

// 삭제 버튼 클릭
scwin.btn_delete_onclick = function () {
    var nurseName = dmp_nurseVo.get("nurseName");

    if (!nurseName) {
        Swal.fire({
            icon: 'warning',
            title: '선택 필요',
            text: '삭제할 간호사를 선택해주세요.',
            html: '그리드에서 간호사를 클릭하여 선택하세요.',
            confirmButtonText: '확인',
            confirmButtonColor: '#1B73E8'
        });
        return;
    }

    if (scwin.fn_deleteNurse(nurseName)) {
        Swal.fire({
            icon: 'success',
            title: '삭제 완료',
            text: nurseName + '님의 간호사 정보가 삭제되었습니다.',
            confirmButtonText: '확인',
            confirmButtonColor: '#1B73E8'
        });
        scwin.fn_clearForm();
    }

};

// 전체선택 버튼 클릭
scwin.btn_select_all_onclick = function () {
    try {
        
        var rowCount = dlt_nurseList.getRowCount();

        if (rowCount === 0) {
            Swal.fire({
                icon: 'warning',
                title: '데이터 없음',
                text: '표시할 데이터가 없습니다.',
                confirmButtonText: '확인',
                confirmButtonColor: '#1B73E8'
            });
            return;
        }

        var allSelected = true;

        // 모든 행이 선택되었는지 확인
        for (var i = 0; i < rowCount; i++) {
            try {
                var isChecked = dlt_nurseList.getCellData(i, "chk_select");
                
                if (isChecked !== "1" && isChecked !== true && isChecked !== "true") {
                    allSelected = false;
                    break;
                }
            } catch (error) {
                allSelected = false;
                break;
            }
        }

        // 모든 행이 선택되었으면 해제, 아니면 모두 선택
        var newValue = allSelected ? false : true;
        
        for (var i = 0; i < rowCount; i++) {
            dlt_nurseList.setCellData(i, "chk_select", newValue);
        }

        var message = allSelected ? "전체 선택 해제" : "전체 선택";

        // 버튼 라벨 업데이트
        if (btn_select_all) {
            var newLabel = allSelected ? "☐ 전체선택" : "☑️ 전체해제";
            btn_select_all.setValue(newLabel);
        }
        
        // 성공 메시지
        Swal.fire({
            icon: 'success',
            title: message,
            text: rowCount + '행이 ' + (allSelected ? '해제' : '선택') + '되었습니다.',
            confirmButtonText: '확인',
            confirmButtonColor: '#1C3D6B',
            timer: 1500,
            timerProgressBar: true
        });
        
    } catch (error) {
        Swal.fire({
            icon: 'error',
            title: '오류',
            text: '전체선택 기능 실행 중 오류가 발생했습니다.',
            confirmButtonText: '확인',
            confirmButtonColor: '#1C3D6B'
        });
    }
};

// 다중 등록 버튼 클릭
scwin.btn_insert_multi_onclick = function () {
    try {
        
        Swal.fire({
            title: '간호사 다중 등록',
            html: `
                <div style="text-align:left;margin-bottom:20px;">
                    <div style="background:#f8f9fa;padding:15px;border-radius:8px;border-left:4px solid #5CD6C0;margin-bottom:15px;">
                        <div style="display:flex;align-items:center;margin-bottom:10px;">
                            <div style="background:#1C3D6B;color:white;width:24px;height:24px;border-radius:4px;display:flex;align-items:center;justify-content:center;font-weight:bold;margin-right:10px;">1</div>
                            <strong style="color:#1C3D6B;">등록할 간호사 수</strong>
                        </div>
                        <input id="nurseCount" type="number" min="1" max="10" value="1" style="width:100%;padding:8px;border-radius:6px;border:1px solid #e9ecef;font-size:14px;" placeholder="등록할 간호사 수를 입력하세요">
                    </div>
                    <div style="background:#f8f9fa;padding:15px;border-radius:8px;border-left:4px solid #5CD6C0;margin-bottom:15px;">
                        <div style="display:flex;align-items:center;margin-bottom:10px;">
                            <div style="background:#1C3D6B;color:white;width:24px;height:24px;border-radius:4px;display:flex;align-items:center;justify-content:center;font-weight:bold;margin-right:10px;">2</div>
                            <strong style="color:#1C3D6B;">입력 가이드</strong>
                        </div>
                        <div style="color:#495057;font-size:14px;line-height:1.5;">
                            • 필수 입력: 간호사명, 직급<br>
                            • 선택 입력: 연차(개월수), 특이사항<br>
                            • 각 간호사별로 개별 입력 폼이 생성됩니다
                        </div>
                    </div>
                    <div style="background:#f8f9fa;padding:15px;border-radius:8px;border-left:4px solid #5CD6C0;">
                        <div style="display:flex;align-items:center;margin-bottom:10px;">
                            <div style="background:#1C3D6B;color:white;width:24px;height:24px;border-radius:4px;display:flex;align-items:center;justify-content:center;font-weight:bold;margin-right:10px;">3</div>
                            <strong style="color:#1C3D6B;">자동 처리</strong>
                        </div>
                        <div style="color:#495057;font-size:14px;line-height:1.5;">
                            입력된 데이터는 자동으로 검증되고 일괄 등록됩니다.
                        </div>
                    </div>
                </div>
            `,
            showCancelButton: true,
            confirmButtonText: '다음',
            cancelButtonText: '취소',
            confirmButtonColor: '#1C3D6B',
            cancelButtonColor: '#6c757d',
            width: '500px',
            preConfirm: () => {
                const count = document.getElementById('nurseCount').value;
                if (!count || count < 1 || count > 10) {
                    Swal.showValidationMessage('1~10 사이의 숫자를 입력해주세요.');
                    return false;
                }
                return parseInt(count);
            }
        }).then((result) => {
            if (result.isConfirmed) {
                var nurseCount = result.value;
                scwin.showNurseInputForms(nurseCount);
            }
        });
    } catch (error) {
        Swal.fire({
            icon: 'error',
            title: '오류',
            text: '다중 등록 기능 실행 중 오류가 발생했습니다.',
            confirmButtonText: '확인',
            confirmButtonColor: '#1C3D6B'
        });
    }
};

// 간호사 입력 폼 표시
scwin.showNurseInputForms = function (nurseCount) {
    try {
        
        var formHtml = '<div style="text-align:left;max-height:400px;overflow-y:auto;">';

        for (var i = 1; i <= nurseCount; i++) {
            formHtml += `
                <div style="background:#f8f9fa;padding:15px;border-radius:8px;margin-bottom:15px;border-left:4px solid #5CD6C0;">
                    <div style="display:flex;align-items:center;margin-bottom:15px;">
                        <div style="background:#1C3D6B;color:white;width:24px;height:24px;border-radius:4px;display:flex;align-items:center;justify-content:center;font-weight:bold;margin-right:10px;">${i}</div>
                        <strong style="color:#1C3D6B;">간호사 ${i}</strong>
                    </div>
                    <div style="display:grid;grid-template-columns:1fr 1fr;gap:10px;margin-bottom:10px;">
                        <div>
                            <label style="display:block;font-weight:600;color:#495057;margin-bottom:5px;font-size:12px;">근무자명 <span style="color:red">*</span></label>
                            <input id="nurseName_${i}" type="text" style="width:100%;padding:8px;border-radius:6px;border:1px solid #e9ecef;font-size:14px;" placeholder="간호사명 입력">
                        </div>
                        <div>
                            <label style="display:block;font-weight:600;color:#495057;margin-bottom:5px;font-size:12px;">직급 <span style="color:red">*</span></label>
                            <input id="position_${i}" type="text" style="width:100%;padding:8px;border-radius:6px;border:1px solid #e9ecef;font-size:14px;" placeholder="직급 입력">
                        </div>
                    </div>
                    <div style="display:grid;grid-template-columns:1fr 1fr;gap:10px;margin-bottom:10px;">
                        <div>
                            <label style="display:block;font-weight:600;color:#495057;margin-bottom:5px;font-size:12px;">연차(개월수)</label>
                            <input id="career_${i}" type="text" style="width:100%;padding:8px;border-radius:6px;border:1px solid #e9ecef;font-size:14px;" placeholder="예: 20">
                        </div>
                        <div>
                            <label style="display:block;font-weight:600;color:#495057;margin-bottom:5px;font-size:12px;">입사일</label>
                            <input id="hireDate_${i}" type="date" style="width:100%;padding:8px;border-radius:6px;border:1px solid #e9ecef;font-size:14px;">
                        </div>
                    </div>
                    <div>
                        <label style="display:block;font-weight:600;color:#495057;margin-bottom:5px;font-size:12px;">특이사항</label>
                        <textarea id="specialNote_${i}" style="width:100%;padding:8px;border-radius:6px;border:1px solid #e9ecef;font-size:14px;resize:vertical;height:60px;" placeholder="특이사항 입력"></textarea>
                    </div>
                </div>
            `;
        }

        formHtml += '</div>';

        Swal.fire({
            title: '간호사 정보 입력',
            html: formHtml,
            showCancelButton: true,
            confirmButtonText: '등록',
            cancelButtonText: '취소',
            confirmButtonColor: '#1C3D6B',
            cancelButtonColor: '#6c757d',
            width: '700px',
            preConfirm: () => {
                try {
                    var nursesToAdd = [];
                    var hasError = false;
                    var errorMessage = '';

                    for (var i = 1; i <= nurseCount; i++) {
                        var nurseName = document.getElementById(`nurseName_${i}`).value.trim();
                        var position = document.getElementById(`position_${i}`).value.trim();
                        var career = document.getElementById(`career_${i}`).value.trim();
                        var hireDate = document.getElementById(`hireDate_${i}`).value;
                        var specialNote = document.getElementById(`specialNote_${i}`).value.trim();

                        // 필수 필드 검증
                        if (!nurseName) {
                            errorMessage = `간호사 ${i}의 근무자명을 입력해주세요.`;
                            hasError = true;
                            break;
                        }
                        if (!position) {
                            errorMessage = `간호사 ${i}의 직급을 입력해주세요.`;
                            hasError = true;
                            break;
                        }

                        // 중복 검사 (기존 데이터와 비교)
                        var duplicateNurse = scwin.nurseData.find(function (item) {
                            return item.nurseName === nurseName && item.delYn !== "Y";
                        });
                        if (duplicateNurse) {
                            errorMessage = `간호사명 "${nurseName}"은 이미 등록되어 있습니다.`;
                            hasError = true;
                            break;
                        }

                        var newNurse = {
                            chk_select: "0",
                            nurseId: "N" + String(scwin.nurseCounter).padStart(3, '0'),
                            nurseName: nurseName,
                            position: position,
                            career: career,
                            specialNote: specialNote,
                            hireDate: hireDate || scwin.fn_getCurrentDate(),
                            useYn: "Y",
                            delYn: "N"
                        };
                        nursesToAdd.push(newNurse);
                        scwin.nurseCounter++;
                    }

                    if (hasError) {
                        Swal.showValidationMessage(errorMessage);
                        return false;
                    }

                    return nursesToAdd;
                } catch (error) {
                    Swal.showValidationMessage('데이터 검증 중 오류가 발생했습니다.');
                    return false;
                }
            }
        }).then((result) => {
            if (result.isConfirmed) {
                try {
                    var nursesToAdd = result.value;

                    if (nursesToAdd && nursesToAdd.length > 0) {
                        try {
                            
                            // 기존 데이터에 추가
                            if (!scwin.nurseData) {
                                scwin.nurseData = [];
                            }
                            
                            // 방법 1: 기존 그리드 데이터 가져오기
                            var existingGridData = [];
                            var gridRowCount = dlt_nurseList.getRowCount();
                           
                            for (var j = 0; j < gridRowCount; j++) {
                                var existingRow = {
                                    chk_select: dlt_nurseList.getCellData(j, "chk_select") || "0",
                                    nurseName: dlt_nurseList.getCellData(j, "nurseName") || "",
                                    position: dlt_nurseList.getCellData(j, "position") || "",
                                    career: dlt_nurseList.getCellData(j, "career") || "",
                                    specialNote: dlt_nurseList.getCellData(j, "specialNote") || "",
                                    hireDate: dlt_nurseList.getCellData(j, "hireDate") || ""
                                };
                                
                                // 빈 행이 아닌 경우만 추가
                                if (existingRow.nurseName && existingRow.position) {
                                    existingGridData.push(existingRow);
                                }
                            }
                            
                            // 기존 데이터와 새 데이터 합치기
                            var combinedData = [];
                            
                            // 방법 1: 기존 그리드 데이터를 우선적으로 사용
                            if (existingGridData.length > 0) {
                                combinedData = existingGridData.concat(nursesToAdd);
                            } else {
                                // 방법 2: 메모리 데이터가 있으면 사용
                                if (scwin.nurseData && scwin.nurseData.length > 0) {
                                    combinedData = scwin.nurseData.concat(nursesToAdd);
                                } else {
                                    // 방법 3: 새 데이터만 사용
                                    combinedData = nursesToAdd;
                                }
                            }
                            
                            // 메모리 데이터 업데이트
                            scwin.nurseData = combinedData;

                            // 그리드에 전체 데이터 설정
                            if (typeof dlt_nurseList !== 'undefined' && dlt_nurseList.setJSON) {
                                dlt_nurseList.setJSON(combinedData);
                            }
                            
                        } catch (error) {
                            throw error;
                        }

                        Swal.fire({
                            icon: 'success',
                            title: '다중 등록 완료',
                            html: `
                                <div style="text-align:center;margin-bottom:20px;">
                                    <div style="background:#d4edda;color:#155724;padding:15px;border-radius:8px;border-left:4px solid #28a745;">
                                        <strong>등록 성공!</strong><br>
                                        ${nursesToAdd.length}건의 간호사 정보가 등록되었습니다.
                                    </div>
                                </div>
                                <div style="text-align:left;font-size:14px;color:#495057;">
                                    <strong>등록된 간호사 목록:</strong><br>
                                    ${nursesToAdd.map(nurse => `• ${nurse.nurseName} (${nurse.position})`).join('<br>')}
                                </div>
                            `,
                            confirmButtonText: '확인',
                            confirmButtonColor: '#1C3D6B'
                        });
                    } else {
                        Swal.fire({
                            icon: 'warning',
                            title: '등록 실패',
                            text: '등록할 수 있는 유효한 데이터가 없습니다.',
                            confirmButtonText: '확인',
                            confirmButtonColor: '#1C3D6B'
                        });
                    }
                } catch (error) {
                    Swal.fire({
                        icon: 'error',
                        title: '등록 오류',
                        text: '다중 등록 처리 중 오류가 발생했습니다.',
                        confirmButtonText: '확인',
                        confirmButtonColor: '#1C3D6B'
                    });
                }
            }
        });
    } catch (error) {
        Swal.fire({
            icon: 'error',
            title: '오류',
            text: '입력 폼 표시 중 오류가 발생했습니다.',
            confirmButtonText: '확인',
            confirmButtonColor: '#1C3D6B'
        });
    }
};

// 다중 수정 버튼 클릭
scwin.btn_update_multi_onclick = function () {
    try {
        
        var selectedRows = scwin.fn_getSelectedRows();
        
        if (selectedRows.length === 0) {
            Swal.fire({
                icon: 'warning',
                title: '선택 필요',
                text: '수정할 간호사를 선택해주세요.',
                confirmButtonText: '확인',
                confirmButtonColor: '#1B73E8'
            });
            return;
        }

        Swal.fire({
            title: '다중 수정',
            html: `
                <div style="text-align:left;margin-bottom:20px;">
                    <div style="background:#f8f9fa;padding:15px;border-radius:8px;border-left:4px solid #5CD6C0;margin-bottom:15px;">
                        <div style="display:flex;align-items:center;margin-bottom:10px;">
                            <div style="background:#1C3D6B;color:white;width:24px;height:24px;border-radius:4px;display:flex;align-items:center;justify-content:center;font-weight:bold;margin-right:10px;">1</div>
                            <strong style="color:#1C3D6B;">수정할 필드 선택</strong>
                        </div>
                        <select id="multiUpdateField" style="width:100%;padding:8px;border-radius:6px;border:1px solid #e9ecef;font-size:14px;">
                            <option value="position">직급</option>
                            <option value="career">연차(개월수)</option>
                            <option value="specialNote">특이사항</option>
                        </select>
                    </div>
                    <div style="background:#f8f9fa;padding:15px;border-radius:8px;border-left:4px solid #5CD6C0;">
                        <div style="display:flex;align-items:center;margin-bottom:10px;">
                            <div style="background:#1C3D6B;color:white;width:24px;height:24px;border-radius:4px;display:flex;align-items:center;justify-content:center;font-weight:bold;margin-right:10px;">2</div>
                            <strong style="color:#1C3D6B;">새로운 값 입력</strong>
                        </div>
                        <input id="multiUpdateValue" type="text" style="width:100%;padding:8px;border-radius:6px;border:1px solid #e9ecef;font-size:14px;" placeholder="새로운 값을 입력하세요">
                    </div>
                    <div style="background:#f8f9fa;padding:15px;border-radius:8px;border-left:4px solid #5CD6C0;">
                        <div style="display:flex;align-items:center;margin-bottom:10px;">
                            <div style="background:#1C3D6B;color:white;width:24px;height:24px;border-radius:4px;display:flex;align-items:center;justify-content:center;font-weight:bold;margin-right:10px;">3</div>
                            <strong style="color:#1C3D6B;">선택된 간호사</strong>
                        </div>
                        <div style="color:#495057;font-size:14px;line-height:1.5;">
                            ${selectedRows.length}명의 간호사가 선택되었습니다.
                        </div>
                    </div>
                </div>
            `,
            showCancelButton: true,
            confirmButtonText: '수정',
            cancelButtonText: '취소',
            confirmButtonColor: '#1C3D6B',
            cancelButtonColor: '#6c757d',
            width: '500px',
            preConfirm: () => {
                try {
                    const field = document.getElementById('multiUpdateField').value;
                    const value = document.getElementById('multiUpdateValue').value;
                    
                    if (!value || value.trim() === "") {
                        Swal.showValidationMessage('새로운 값을 입력해주세요.');
                        return false;
                    }
                    
                    return { field, value };
                } catch (error) {
                    Swal.showValidationMessage('입력값 검증 중 오류가 발생했습니다.');
                    return false;
                }
            }
        }).then((result) => {
            if (result.isConfirmed) {
                try {
                    var field = result.value.field;
                    var newValue = result.value.value;
                    var updatedCount = 0;
                    
                    selectedRows.forEach(function (row) {
                        try {
                            var nurseName = dlt_nurseList.getCellData(row, "nurseName");
                            
                            // 그리드 데이터 직접 수정
                            dlt_nurseList.setCellData(row, field, newValue);
                            
                            // 메모리 데이터도 수정
                            if (scwin.nurseData) {
                                var index = scwin.nurseData.findIndex(function (item) {
                                    return item.nurseName === nurseName;
                                });
                                if (index > -1) {
                                    scwin.nurseData[index][field] = newValue;
                                }
                            }
                            
                            updatedCount++;
                        }
                    });
                    
                    Swal.fire({
                        icon: 'success',
                        title: '다중 수정 완료',
                        text: '다중 수정 완료: ' + updatedCount + '건의 간호사 정보가 수정되었습니다.',
                        confirmButtonText: '확인',
                        confirmButtonColor: '#1C3D6B'
                    });
                } catch (error) {
                    Swal.fire({
                        icon: 'error',
                        title: '수정 오류',
                        text: '다중 수정 처리 중 오류가 발생했습니다.',
                        confirmButtonText: '확인',
                        confirmButtonColor: '#1C3D6B'
                    });
                }
            }
        });
    } catch (error) {
        Swal.fire({
            icon: 'error',
            title: '오류',
            text: '다중 수정 기능 실행 중 오류가 발생했습니다.',
            confirmButtonText: '확인',
            confirmButtonColor: '#1C3D6B'
        });
    }
};

// 다중 삭제 버튼 클릭
scwin.btn_delete_multi_onclick = function () {
    try {
        
        var selectedRows = scwin.fn_getSelectedRows();
        
        if (selectedRows.length === 0) {
            Swal.fire({
                icon: 'warning',
                title: '선택 필요',
                text: '삭제할 간호사를 선택해주세요.',
                confirmButtonText: '확인',
                confirmButtonColor: '#1B73E8'
            });
            return;
        }

        // 삭제 확인 다이얼로그
        var nursesToDelete = [];
        selectedRows.forEach(function (row) {
            var nurseName = dlt_nurseList.getCellData(row, "nurseName");
            nursesToDelete.push(nurseName);
        });

        Swal.fire({
            title: '다중 삭제 확인',
            html: `
                <div style="text-align:left;margin-bottom:20px;">
                    <div style="background:#fff3cd;color:#856404;padding:15px;border-radius:8px;border-left:4px solid #ffc107;margin-bottom:15px;">
                        <strong>⚠️ 주의사항</strong><br>
                        선택된 ${selectedRows.length}명의 간호사 정보가 삭제됩니다.
                    </div>
                    <div style="background:#f8f9fa;padding:15px;border-radius:8px;border-left:4px solid #5CD6C0;">
                        <strong>삭제할 간호사 목록:</strong><br>
                        ${nursesToDelete.map(nurse => `• ${nurse}`).join('<br>')}
                    </div>
                </div>
            `,
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: '삭제',
            cancelButtonText: '취소',
            confirmButtonColor: '#dc3545',
            cancelButtonColor: '#6c757d',
            width: '500px'
        }).then((result) => {
            if (result.isConfirmed) {
                try {
                    var deletedCount = 0;
                    
                    // 선택된 행들을 역순으로 삭제 (인덱스 변화 방지)
                    var sortedRows = selectedRows.sort(function(a, b) {
                        return b - a; // 내림차순 정렬
                    });
                    
                    sortedRows.forEach(function (row) {
                        try {
                            var nurseName = dlt_nurseList.getCellData(row, "nurseName");
                            
                            // 그리드에서 행 삭제
                            dlt_nurseList.removeRow(row);
                            
                            // 메모리 데이터에서도 삭제
                            if (scwin.nurseData) {
                                var index = scwin.nurseData.findIndex(function (item) {
                                    return item.nurseName === nurseName;
                                });
                                if (index > -1) {
                                    scwin.nurseData.splice(index, 1);
                                }
                            }
                            
                            deletedCount++;
                        }
                    });
                    
                    Swal.fire({
                        icon: 'success',
                        title: '다중 삭제 완료',
                        text: '다중 삭제 완료: ' + deletedCount + '건의 간호사 정보가 삭제되었습니다.',
                        confirmButtonText: '확인',
                        confirmButtonColor: '#1C3D6B'
                    });
                    
                    // 폼 초기화
                    scwin.fn_clearForm();
                    
                } catch (error) {
                    Swal.fire({
                        icon: 'error',
                        title: '삭제 오류',
                        text: '다중 삭제 처리 중 오류가 발생했습니다.',
                        confirmButtonText: '확인',
                        confirmButtonColor: '#1C3D6B'
                    });
                }
            }
        });
    } catch (error) {
        Swal.fire({
            icon: 'error',
            title: '오류',
            text: '다중 삭제 기능 실행 중 오류가 발생했습니다.',
            confirmButtonText: '확인',
            confirmButtonColor: '#1C3D6B'
        });
    }
};

// 선택된 행 가져오기
scwin.fn_getSelectedRows = function () {
    try {
        var selectedRows = [];
        var rowCount = dlt_nurseList.getRowCount();

        for (var i = 0; i < rowCount; i++) {
            try {
                var isChecked = dlt_nurseList.getCellData(i, "chk_select");
                
                if (isChecked === "1" || isChecked === true || isChecked === "true") {
                    selectedRows.push(i);
                }
            }
        }

        return selectedRows;
    } catch (error) {
        return [];
    }
};

// 모든 체크박스 해제
scwin.fn_clearAllChecks = function () {
    var rowCount = dlt_nurseList.getRowCount();
    for (var i = 0; i < rowCount; i++) {
        dlt_nurseList.setCellData(i, "chk_select", false);
    }
};

// 그리드 행 클릭
scwin.grd_nurseList_oncellclick = function (row, col) {
    // 체크박스 컬럼은 자동으로 처리되므로 별도 처리 불필요

    // 체크박스 컬럼이 아닌 경우에만 상세 정보 로드
    if (col !== 0) {
        var nurseName = dlt_nurseList.getCellData(row, "nurseName");
        var position = dlt_nurseList.getCellData(row, "position");
        var career = dlt_nurseList.getCellData(row, "career");
        var specialNote = dlt_nurseList.getCellData(row, "specialNote");
        var hireDate = dlt_nurseList.getCellData(row, "hireDate");
        if (nurseName && position && career && specialNote && hireDate) {
            scwin.fn_selectNurse(nurseName, position, career, specialNote, hireDate);
        }
    }
};

// 폼 검증
scwin.fn_validateForm = function () {
    var nurseName = dmp_nurseVo.get("nurseName");
    var position = dmp_nurseVo.get("position");

    if (!nurseName || nurseName.trim() === "") {
        Swal.fire({
            icon: 'warning',
            title: '입력 필요',
            text: '근무자명을 입력해주세요.',
            confirmButtonText: '확인',
            confirmButtonColor: '#1B73E8'
        });
        ipt_nurseName.focus();
        return false;
    }

    if (nurseName.trim().length < 2) {
        Swal.fire({
            icon: 'warning',
            title: '입력 오류',
            text: '근무자명은 2글자 이상 입력해주세요.',
            confirmButtonText: '확인',
            confirmButtonColor: '#1B73E8'
        });
        ipt_nurseName.focus();
        return false;
    }

    if (!position || position.trim() === "") {
        Swal.fire({
            icon: 'warning',
            title: '입력 필요',
            text: '직급을 입력해주세요.',
            confirmButtonText: '확인',
            confirmButtonColor: '#1B73E8'
        });
        ipt_position.focus();
        return false;
    }

    // 중복 검사 (수정 시에는 본인 제외)
    var originalName = dmp_nurseVo.get("nurseName");
    var duplicateNurse = scwin.nurseData.find(function (item) {
        return item.nurseName === nurseName.trim() &&
            item.delYn !== "Y" &&
            item.nurseName !== originalName;
    });

    if (duplicateNurse) {
        Swal.fire({
            icon: 'warning',
            title: '중복 오류',
            text: '이미 등록된 근무자명입니다.',
            confirmButtonText: '확인',
            confirmButtonColor: '#1B73E8'
        });
        ipt_nurseName.focus();
        return false;
    }

    return true;
};

// 폼 초기화
scwin.fn_clearForm = function () {
    dmp_nurseVo.set("nurseId", "");
    dmp_nurseVo.set("nurseName", "");
    dmp_nurseVo.set("position", "");
    dmp_nurseVo.set("career", "");
    dmp_nurseVo.set("specialNote", "");
    dmp_nurseVo.set("hireDate", "");
    dmp_nurseVo.set("wardName", "");
    dmp_nurseVo.set("scNurseId", "");
    dmp_nurseVo.set("scNurseName", "");
    dmp_nurseVo.set("scPosition", "");
    dmp_nurseVo.set("scWardId", "");
};

// 현재 날짜 반환
scwin.fn_getCurrentDate = function () {
    var now = new Date();
    var year = now.getFullYear();
    var month = String(now.getMonth() + 1).padStart(2, '0');
    var day = String(now.getDate()).padStart(2, '0');
    return year + "-" + month + "-" + day;
};

// 엑셀 업로드
scwin.btn_excel_onclick = function () {
    try {
        // 화면 중앙 위치 계산
        var screenWidth = window.screen.width || 1920;
        var screenHeight = window.screen.height || 1080;
        var modalWidth = 450;
        var modalHeight = 450;
        var left = Math.max(0, (screenWidth - modalWidth) / 2);
        var top = Math.max(0, (screenHeight - modalHeight) / 2);
        
        var jsnOptions = {
            headerExist: "1", // Excel 파일에 헤더가 있는지 여부
            uploadDataCallBack: scwin.fn_excelUploadCallback, // 업로드 완료 후 콜백
            features: "top=" + top + ",height=" + modalHeight + ",left=" + left + ",width=" + modalWidth,
            wframe: true
        };

        // WebSquare의 엑셀 업로드 기능 사용
        if (typeof grd_nurseList !== 'undefined' && grd_nurseList && grd_nurseList.advancedExcelUpload) {

            // 그리드 데이터 변경 감지를 위한 타이머 설정
            scwin.startGridDataMonitoring();

            grd_nurseList.advancedExcelUpload(jsnOptions);

        }
    } catch (error) {
        Swal.fire({
            icon: 'error',
            title: '업로드 오류',
            text: '엑셀 업로드 중 오류가 발생했습니다.',
            confirmButtonText: '확인',
            confirmButtonColor: '#1C3D6B'
        });
    }
};

// 엑셀 업로드 완료 콜백
scwin.fn_excelUploadCallback = function (uploadData) {
    try {

        // 로딩 메시지 닫기 (안전하게)
        if (typeof Swal !== 'undefined' && Swal.close) {
            Swal.close();
        }

        if (uploadData && uploadData.length > 0) {
            var addedCount = 0;
            var nursesToSave = [];

            uploadData.forEach(function (data) {

                // 필수 필드 검증
                if (data.nurseName && data.position) {
                    var newNurse = {
                        chk_select: "0",
                        nurseName: data.nurseName.trim(),
                        position: data.position.trim(),
                        career: data.career ? data.career.toString().trim() : "",
                        specialNote: data.specialNote ? data.specialNote.toString().trim() : "",
                        hireDate: data.hireDate ? data.hireDate.toString().trim() : scwin.fn_getCurrentDate(),
                        useYn: "Y",
                        delYn: "N"
                    };

                    scwin.nurseData.push(newNurse);
                    nursesToSave.push(newNurse);
                    scwin.nurseCounter++;
                    addedCount++;
                }
            });

            // 그리드에 데이터 표시 (안전하게)
            if (typeof dlt_nurseList !== 'undefined' && dlt_nurseList.setJSON) {
                dlt_nurseList.setJSON(scwin.nurseData);
            }

            // SweetAlert2로 엑셀 업로드 완료 메시지 표시 (안전하게)
            if (typeof Swal !== 'undefined' && Swal.fire) {
                Swal.fire({
                    icon: 'success',
                    title: '엑셀 업로드 완료',
                    html: `
                    <div style="text-align:center;margin-bottom:20px;">
                        <div style="background:#d4edda;color:#155724;padding:15px;border-radius:8px;border-left:4px solid #28a745;">
                            <strong>업로드 성공!</strong><br>
                            ${addedCount}건의 간호사 정보가 그리드에 표시되었습니다.
                        </div>
                    </div>
                    <div style="text-align:left;font-size:14px;color:#495057;">
                        <strong>업로드된 데이터:</strong><br>
                        • 근무자명: ${addedCount}건<br>
                        • 직급: ${addedCount}건<br>
                        • 연차: ${nursesToSave.filter(n => n.career).length}건<br>
                        • 특이사항: ${nursesToSave.filter(n => n.specialNote).length}건<br>
                        • 입사일: ${nursesToSave.filter(n => n.hireDate).length}건
                    </div>
                    <div style="text-align:left;font-size:12px;color:#6c757d;margin-top:15px;padding-top:15px;border-top:1px solid #dee2e6;">
                        <strong>다음 단계:</strong><br>
                        • 간호사 목록에서 데이터를 확인하세요<br>
                        • 필요시 데이터를 수정하세요<br>
                        • 저장은 자동으로 진행됩니다
                    </div>
                `,
                    confirmButtonText: '확인',
                    confirmButtonColor: '#1C3D6B',
                    width: '500px'
                });

            }

        } else {
            if (typeof Swal !== 'undefined' && Swal.fire) {
                Swal.fire({
                    icon: 'warning',
                    title: '업로드 실패',
                    text: '업로드할 데이터가 없습니다.',
                    confirmButtonText: '확인',
                    confirmButtonColor: '#1B73E8'
                });
            }
        }
    }
};

// 그리드 데이터 변경 감지 시작
scwin.startGridDataMonitoring = function () {

    var checkCount = 0;
    var maxChecks = 60; // 최대 30초 대기 (500ms * 60)
    var previousRowCount = 0;

    var checkGridData = function () {
        checkCount++;

        try {
            // 그리드의 행 수 확인
            var currentRowCount = 0;
            if (typeof dlt_nurseList !== 'undefined' && dlt_nurseList && dlt_nurseList.getRowCount) {
                currentRowCount = dlt_nurseList.getRowCount();
            }

            
            // 데이터가 추가되었는지 확인
            if (currentRowCount > previousRowCount && currentRowCount > 0) {
                
                // 그리드에서 데이터 추출
                var gridData = [];
                for (var i = 0; i < currentRowCount; i++) {
                    try {
                        var rowData = {
                            nurseName: dlt_nurseList.getCellData(i, "nurseName") || "",
                            position: dlt_nurseList.getCellData(i, "position") || "",
                            career: dlt_nurseList.getCellData(i, "career") || "",
                            specialNote: dlt_nurseList.getCellData(i, "specialNote") || "",
                            hireDate: dlt_nurseList.getCellData(i, "hireDate") || ""
                        };

                        // 빈 행이 아닌 경우만 추가
                        if (rowData.nurseName && rowData.position) {
                            gridData.push(rowData);
                        }
                    }
                }

                // 새로 추가된 데이터만 필터링
                var newData = gridData.slice(previousRowCount);

                if (newData.length > 0) {
                    // 콜백 함수 호출
                    scwin.fn_excelUploadCallback(newData);
                    return; // 모니터링 중단
                }
            }

            previousRowCount = currentRowCount;

            // 최대 체크 횟수 초과 시 중단
            if (checkCount >= maxChecks) {
                return;
            }

            // 500ms 후 다시 체크
            setTimeout(checkGridData, 500);

        } catch (e) {

            if (checkCount < maxChecks) {
                setTimeout(checkGridData, 500);
            }
        }
    };

    // 즉시 첫 번째 체크 시작
    setTimeout(checkGridData, 500);
};

// 간호사 등록 에러 처리
scwin.sbm_insertNurse_submiterror = function (e) {
    Swal.fire({
        icon: 'error',
        title: '등록 실패',
        text: '간호사 등록 중 오류가 발생했습니다. (상태: ' + e.status + ')',
        confirmButtonText: '확인',
        confirmButtonColor: '#1C3D6B'
    });
};

scwin.sbm_insertNurseList_submitdone = function (e) {

    try {
        var responseData = e.responseJSON;

        if (responseData && responseData.elHeader) {
            var elHeader = responseData.elHeader;

            if (elHeader.resSuc === true) {

                // 폼 초기화
                scwin.fn_clearForm();

                Swal.fire({
                    icon: 'success',
                    title: '등록 완료',
                    text: '간호사 정보가 등록되었습니다.',
                    confirmButtonText: '확인',
                    confirmButtonColor: '#1C3D6B'
                });

            } else {
                Swal.fire({
                    icon: 'error',
                    title: '등록 실패',
                    text: elHeader.resMsg || '간호사 등록에 실패했습니다.',
                    confirmButtonText: '확인',
                    confirmButtonColor: '#1C3D6B'
                });
            }
        } else {
            Swal.fire({
                icon: 'error',
                title: '응답 오류',
                text: '서버 응답 형식이 올바르지 않습니다.',
                confirmButtonText: '확인',
                confirmButtonColor: '#1C3D6B'
            });
        }

    } catch (error) {
        Swal.fire({
            icon: 'error',
            title: '처리 오류',
            text: '응답 데이터 처리 중 오류가 발생했습니다.',
            confirmButtonText: '확인',
            confirmButtonColor: '#1C3D6B'
        });
    }
};
]]></script>
		<style type="text/css">
			/* 간호사 관리 페이지 전용 CSS */

			/* 병원 헤더 */
			.hospital_header {
			background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%);
			border: 2px solid #1C3D6B;
			border-radius: 15px;
			padding: 20px 30px;
			margin-bottom: 30px;
			box-shadow: 0 4px 20px rgba(28, 61, 107, 0.2);
			display: flex;
			justify-content: space-between;
			align-items: center;
			}

			.hospital_info {
			display: flex;
			align-items: center;
			gap: 20px;
			}

			.hospital_logo {
			font-size: 3em !important;
			color: #1C3D6B !important;
			margin: 0 !important;
			}

			.hospital_details {
			display: flex;
			flex-direction: column;
			gap: 5px;
			}

			.hospital_name {
			font-size: 2.2em !important;
			font-weight: bold !important;
			color: #1C3D6B !important;
			margin: 0 !important;
			}

			.hospital_dept {
			font-size: 1.2em !important;
			color: #666 !important;
			margin: 0 !important;
			}

			.user_info {
			display: flex;
			flex-direction: column;
			align-items: flex-end;
			gap: 5px;
			}

			.current_user {
			font-size: 1.1em !important;
			font-weight: 600 !important;
			color: #1C3D6B !important;
			margin: 0 !important;
			}

			.current_date {
			font-size: 0.95em !important;
			color: #666 !important;
			margin: 0 !important;
			}

			/* 전체 컨테이너 */
			.nurse-container {
			max-width: 1200px;
			margin: 0 auto;
			padding: 20px;
			font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
			background-color: #f8f9fa;
			}

			/* 페이지 헤더 */
			.nurse-header {
			background: linear-gradient(135deg, #1C3D6B 0%, #2E5984 100%);
			color: white;
			padding: 30px;
			border-radius: 12px;
			margin-bottom: 30px;
			box-shadow: 0 4px 20px rgba(28, 61, 107, 0.3);
			}

			.nurse-header h1 {
			margin: 0;
			font-size: 2.5em;
			font-weight: 300;
			text-align: center;
			}

			.nurse-header .subtitle {
			text-align: center;
			font-size: 1.1em;
			opacity: 0.9;
			margin-top: 10px;
			}

			/* 검색 영역 */
			.nurse-search-section {
			background: white;
			padding: 25px;
			border-radius: 12px;
			margin-bottom: 25px;
			box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
			}

			.nurse-search-title {
			font-size: 1.3em;
			font-weight: 600;
			color: #1C3D6B;
			margin-bottom: 20px;
			padding-bottom: 10px;
			border-bottom: 2px solid #e9ecef;
			}

			/* 검색 헤더 스타일 */
			.search_header {
			margin-bottom: 20px;
			text-align: center;
			display: flex;
			flex-direction: column;
			align-items: center;
			gap: 10px;
			}

			.search_title {
			font-size: 1.4em !important;
			font-weight: 700 !important;
			color: #1C3D6B !important;
			margin-bottom: 10px !important;
			display: block !important;
			}

			/* 이미지 스타일 */
			.search_header xf\:image {
			display: inline-block !important;
			vertical-align: middle !important;
			margin-top: -2px !important;
			margin-right: 8px !important;
			}

			.search_guide {
			font-size: 0.95em !important;
			color: #6c757d !important;
			background: #f8f9fa !important;
			padding: 10px 20px !important;
			border-radius: 20px !important;
			border: 1px solid #dee2e6 !important;
			display: inline-block !important;
			margin: 0 !important;
			}

			.nurse-search-form {
			display: grid;
			grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
			gap: 20px;
			align-items: end;
			}

			.nurse-form-group {
			display: flex;
			flex-direction: column;
			}

			.nurse-form-group label {
			font-weight: 600;
			color: #495057;
			margin-bottom: 8px;
			font-size: 0.95em;
			}

			.nurse-form-group input,
			.nurse-form-group select {
			padding: 12px 16px;
			border: 2px solid #e9ecef;
			border-radius: 8px;
			font-size: 1em;
			transition: all 0.3s ease;
			background-color: white;
			}

			.nurse-form-group input:focus,
			.nurse-form-group select:focus {
			outline: none;
			border-color: #1C3D6B;
			box-shadow: 0 0 0 3px rgba(28, 61, 107, 0.1);
			}

			.nurse-radio-group {
			display: flex;
			gap: 15px;
			margin-top: 8px;
			}

			.nurse-radio-item {
			display: flex;
			align-items: center;
			gap: 5px;
			}

			.nurse-radio-item input[type="radio"] {
			width: 18px;
			height: 18px;
			margin: 0;
			}

			.nurse-radio-item label {
			margin: 0;
			font-weight: 500;
			cursor: pointer;
			}

			/* 버튼 스타일 */
			<!-- .nurse-btn {
				padding: 12px 24px;
				border: none;
				border-radius: 8px;
				font-size: 1em;
				font-weight: bold;
				cursor: pointer;
				transition: all 0.3s ease;
				text-decoration: none;
				display: inline-flex;
				align-items: center;
				gap: 8px;
				min-width: 120px;
				justify-content: center;
				}

				.nurse-btn-primary {
				background: #5CD6C0;
				color: #1C3D6B;
				}

				.nurse-btn-primary:hover {
				background: #4BC5B0;
				transform: translateY(-2px);
				box-shadow: 0 4px 15px rgba(92, 214, 192, 0.3);
				}

				.nurse-btn-secondary {
				background: #5CD6C0;
				color: #1C3D6B;
				}

				.nurse-btn-secondary:hover {
				background: #4BC5B0;
				transform: translateY(-2px);
				}

				.nurse-btn-success {
				background: #5CD6C0;
				color: #1C3D6B;
				}

				.nurse-btn-success:hover {
				background: #4BC5B0;
				transform: translateY(-2px);
				}

				.nurse-btn-danger {
				background: #5CD6C0;
				color: #1C3D6B;
				}

				.nurse-btn-danger:hover {
				background: #4BC5B0;
				transform: translateY(-2px);
				}

				.nurse-btn-warning {
				background: #1C3D6B;
				color: #5CD6C0;
				}

				.nurse-btn-warning:hover {
				background: #4BC5B0;
				transform: translateY(-2px);
				}

				.nurse-btn-info {
				background: #5CD6C0;
				color: #1C3D6B;
				}

				.nurse-btn-info:hover {
				background: #4BC5B0;
				transform: translateY(-2px);
				} -->

			/* 다중 버튼 특별 스타일 */
			.btn_select_all {
			background: #1C3D6B !important;
			color: #fff !important;
			padding: 12px 20px !important;
			border: none !important;
			border-radius: 8px !important;
			font-size: 1em !important;
			font-weight: bold !important;
			cursor: pointer !important;
			transition: all 0.3s ease !important;
			min-width: 100px !important;
			line-height: 1.2 !important;
			}

			.btn_select_all:hover {
			background: #5C5DB0 !important;
			transform: translateY(-2px) !important;
			}

			.btn_insert_multi {
			background: #1C3D6B !important;
			color: #fff !important;
			padding: 12px 20px !important;
			border: none !important;
			border-radius: 8px !important;
			font-size: 1em !important;
			font-weight: bold !important;
			cursor: pointer !important;
			transition: all 0.3s ease !important;
			min-width: 100px !important;
			line-height: 1.2 !important;
			}

			.btn_insert_multi:hover {
			background: #5C5DB0 !important;
			transform: translateY(-2px) !important;
			}

			.btn_update_multi {
			background: #1C3D6B !important;
			color: #fff !important;
			padding: 12px 20px !important;
			border: none !important;
			border-radius: 8px !important;
			font-size: 1em !important;
			font-weight: bold !important;
			cursor: pointer !important;
			transition: all 0.3s ease !important;
			min-width: 100px !important;
			line-height: 1.2 !important;
			}

			.btn_update_multi:hover {
			background: #5C5DB0 !important;
			transform: translateY(-2px) !important;
			}

			/* 그리드 영역 */
			.nurse-grid-section {
			background: white;
			border-radius: 12px;
			overflow: hidden;
			box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
			margin-bottom: 25px;
			}

			.nurse-grid-header {
			background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
			padding: 20px 25px;
			border-bottom: 1px solid #dee2e6;
			display: flex;
			justify-content: space-between;
			align-items: center;
			}

			.nurse-grid-title {
			font-size: 1.3em;
			font-weight: 600;
			color: #1C3D6B;
			margin: 0;
			}

			.nurse-grid-actions {
			display: flex;
			gap: 10px;
			}

			.nurse-grid-content {
			padding: 25px;
			}

			/* 테이블 스타일 */
			.nurse-table {
			width: 100%;
			border-collapse: collapse;
			margin-top: 20px;
			}

			.nurse-table th,
			.nurse-table td {
			padding: 15px 12px;
			text-align: left;
			border-bottom: 1px solid #e9ecef;
			}

			.nurse-table th {
			background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
			font-weight: 600;
			color: #495057;
			position: sticky;
			top: 0;
			z-index: 10;
			}

			.nurse-table tbody tr {
			transition: all 0.2s ease;
			}

			.nurse-table tbody tr:hover {
			background-color: #f8f9fa;
			transform: scale(1.01);
			}

			.nurse-table td {
			vertical-align: middle;
			}

			.nurse-table .checkbox-cell {
			width: 50px;
			text-align: center;
			}

			.nurse-table .checkbox-cell input[type="checkbox"] {
			width: 18px;
			height: 18px;
			cursor: pointer;
			}

			/* 입력 폼 영역 */
			.nurse-form-section {
			background: white;
			padding: 25px;
			border-radius: 12px;
			margin-bottom: 25px;
			box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
			}

			.nurse-form-title {
			font-size: 1.3em;
			font-weight: 600;
			color: #1C3D6B;
			margin-bottom: 20px;
			padding-bottom: 10px;
			border-bottom: 2px solid #e9ecef;
			}

			.nurse-form-grid {
			display: grid;
			grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
			gap: 20px;
			}

			.nurse-form-row {
			display: grid;
			grid-template-columns: 150px 1fr;
			gap: 15px;
			align-items: center;
			margin-bottom: 20px;
			}

			.nurse-form-label {
			font-weight: 600;
			color: #495057;
			text-align: right;
			padding-right: 10px;
			}

			.nurse-form-input {
			padding: 12px 16px;
			border: 2px solid #e9ecef;
			border-radius: 8px;
			font-size: 1em;
			transition: all 0.3s ease;
			}

			.nurse-form-input:focus {
			outline: none;
			border-color: #1C3D6B;
			box-shadow: 0 0 0 3px rgba(28, 61, 107, 0.1);
			}

			.nurse-form-textarea {
			min-height: 100px;
			resize: vertical;
			}

			.nurse-form-select {
			padding: 12px 16px;
			border: 2px solid #e9ecef;
			border-radius: 8px;
			font-size: 1em;
			background-color: white;
			cursor: pointer;
			transition: all 0.3s ease;
			}

			.nurse-form-select:focus {
			outline: none;
			border-color: #1C3D6B;
			box-shadow: 0 0 0 3px rgba(28, 61, 107, 0.1);
			}

			/* 버튼 그룹 */
			.nurse-btn-group {
			display: flex;
			gap: 10px;
			justify-content: center;
			margin-top: 30px;
			padding-top: 20px;
			border-top: 1px solid #e9ecef;
			}

			/* 상태 표시 */
			.nurse-status {
			padding: 4px 12px;
			border-radius: 20px;
			font-size: 0.85em;
			font-weight: 600;
			text-transform: uppercase;
			}

			.nurse-status.active {
			background-color: #d4edda;
			color: #155724;
			}

			.nurse-status.inactive {
			background-color: #f8d7da;
			color: #721c24;
			}

			/* 페이지네이션 */
			.nurse-pagination {
			display: flex;
			justify-content: center;
			gap: 5px;
			margin-top: 30px;
			}

			.nurse-pagination .page-btn {
			padding: 8px 12px;
			border: 1px solid #dee2e6;
			background: white;
			color: #495057;
			text-decoration: none;
			border-radius: 6px;
			transition: all 0.2s ease;
			}

			.nurse-pagination .page-btn:hover {
			background: #e9ecef;
			border-color: #adb5bd;
			}

			.nurse-pagination .page-btn.active {
			background: #1C3D6B;
			color: white;
			border-color: #1C3D6B;
			}

			/* 반응형 디자인 */
			@media (max-width: 768px) {
			.nurse-container {
			padding: 15px;
			}

			/* 병원 헤더 반응형 */
			.hospital_header {
			flex-direction: column;
			gap: 15px;
			text-align: center;
			}

			.hospital_info {
			flex-direction: column;
			gap: 10px;
			}

			.hospital_logo {
			font-size: 2.5em !important;
			}

			.hospital_name {
			font-size: 1.8em !important;
			}

			.hospital_dept {
			font-size: 1em !important;
			}

			.user_info {
			align-items: center;
			}

			.nurse-header {
			padding: 20px;
			}

			.nurse-header h1 {
			font-size: 2em;
			}

			.nurse-search-form {
			grid-template-columns: 1fr;
			}

			/* 검색 헤더 반응형 */
			.search_header {
			margin-bottom: 15px;
			flex-direction: column;
			}

			.search_title {
			font-size: 1.2em !important;
			}

			.search_guide {
			font-size: 0.85em !important;
			padding: 8px 15px !important;
			text-align: center !important;
			line-height: 1.4 !important;
			}

			.nurse-grid-header {
			flex-direction: column;
			gap: 15px;
			align-items: stretch;
			}

			.nurse-grid-actions, .grid_buttons {
			justify-content: center;
			flex-wrap: wrap;
			}

			.nurse-form-row {
			grid-template-columns: 1fr;
			gap: 8px;
			}

			.nurse-form-label {
			text-align: left;
			padding-right: 0;
			}

			.nurse-btn-group {
			flex-direction: column;
			align-items: stretch;
			}

			.nurse-table {
			font-size: 0.9em;
			}

			.nurse-table th,
			.nurse-table td {
			padding: 10px 8px;
			}

			/* 다중 버튼 반응형 */
			.btn_select_all, .btn_insert_multi, .btn_update_multi, .btn_delete_multi, .btn_excel, .btn_list_all {
			margin-bottom: 5px !important;
			min-width: 100px !important;
			}
			}

			/* 애니메이션 */
			@keyframes fadeIn {
			from {
			opacity: 0;
			transform: translateY(20px);
			}
			to {
			opacity: 1;
			transform: translateY(0);
			}
			}

			.nurse-fade-in {
			animation: fadeIn 0.5s ease-out;
			}

			/* 로딩 스피너 */
			.nurse-loading {
			display: flex;
			justify-content: center;
			align-items: center;
			height: 200px;
			}

			.nurse-spinner {
			width: 40px;
			height: 40px;
			border: 4px solid #f3f3f3;
			border-top: 4px solid #1C3D6B;
			border-radius: 50%;
			animation: spin 1s linear infinite;
			}

			@keyframes spin {
			0% { transform: rotate(0deg); }
			100% { transform: rotate(360deg); }
			}

			/* 알림 메시지 */
			.nurse-alert {
			padding: 15px 20px;
			margin-bottom: 20px;
			border-radius: 8px;
			border-left: 4px solid;
			}

			.nurse-alert.success {
			background-color: #d4edda;
			color: #155724;
			border-left-color: #28a745;
			}

			.nurse-alert.error {
			background-color: #f8d7da;
			color: #721c24;
			border-left-color: #dc3545;
			}

			.nurse-alert.warning {
			background-color: #fff3cd;
			color: #856404;
			border-left-color: #ffc107;
			}

			.nurse-alert.info {
			background-color: #d1ecf1;
			color: #0c5460;
			border-left-color: #17a2b8;
			}

			/* 기본 WebSquare 스타일 조정 */
			.sub_contents {
			padding: 20px;
			background-color: #f8f9fa;
			}

			.search_area {
			background: white;
			padding: 25px;
			border-radius: 12px;
			margin-bottom: 25px;
			box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
			}

			.search_row {
			display: grid;
			grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
			gap: 20px;
			align-items: end;
			}

			.search_item {
			display: flex;
			flex-direction: column;
			}

			.search_label {
			font-weight: 600 !important;
			color: #495057 !important;
			margin-bottom: 8px !important;
			font-size: 0.95em !important;
			}

			.search_input {
			padding: 12px 16px !important;
			border: 2px solid #e9ecef !important;
			border-radius: 8px !important;
			font-size: 1em !important;
			transition: all 0.3s ease !important;
			background-color: white !important;
			}

			.search_input:focus {
			outline: none !important;
			border-color: #1C3D6B !important;
			box-shadow: 0 0 0 3px rgba(28, 61, 107, 0.1) !important;
			}

			.search_buttons {
			display: flex;
			gap: 10px;
			justify-content: flex-end;
			}

			.btn_search, .btn_reset {
			padding: 12px 20px !important;
			border: none !important;
			border-radius: 8px !important;
			font-size: 1em !important;
			font-weight: bold !important;
			cursor: pointer !important;
			transition: all 0.3s ease !important;
			text-decoration: none !important;
			display: inline-flex !important;
			align-items: center !important;
			gap: 8px !important;
			min-width: 100px !important;
			justify-content: center !important;
			line-height: 1.2 !important;
			}

			.btn_search {
			background: #1C3D6B !important;
			color: #fff !important;
			}

			.btn_search:hover {
			background: #5C5DB0 !important;
			transform: translateY(-2px) !important;
			}

			/* 버튼 내부 이미지 스타일 */
			.btn_search xf\:image,
			.btn_list_all xf\:image,
			.btn_reset xf\:image,
			.btn_select_all xf\:image,
			.btn_excel xf\:image,
			.btn_insert_multi xf\:image,
			.btn_update_multi xf\:image,
			.btn_delete_multi xf\:image,
			.btn_insert xf\:image,
			.btn_update xf\:image,
			.btn_delete xf\:image {
			display: inline-block !important;
			vertical-align: middle !important;
			margin-right: 8px !important;
			margin-top: -2px !important;
			}

			/* w2:button 내부 이미지 스타일 */
			.btn_search w2\:button xf\:image,
			.btn_list_all w2\:button xf\:image,
			.btn_reset w2\:button xf\:image,
			.btn_select_all w2\:button xf\:image,
			.btn_excel w2\:button xf\:image,
			.btn_insert_multi w2\:button xf\:image,
			.btn_update_multi w2\:button xf\:image,
			.btn_delete_multi w2\:button xf\:image,
			.btn_insert w2\:button xf\:image,
			.btn_update w2\:button xf\:image,
			.btn_delete w2\:button xf\:image {
			display: inline-block !important;
			vertical-align: middle !important;
			margin-right: 8px !important;
			margin-top: -2px !important;
			}



			.btn_reset {
			background: #1C3D6B !important;
			color: #fff !important;
			}

			.btn_reset:hover {
			background: #5C5DB0 !important;
			transform: translateY(-2px) !important;
			}

			.btn_list_all {
			padding: 12px 20px !important;
			border: none !important;
			border-radius: 8px !important;
			font-size: 1em !important;
			font-weight: bold !important;
			cursor: pointer !important;
			transition: all 0.3s ease !important;
			text-decoration: none !important;
			display: inline-flex !important;
			align-items: center !important;
			gap: 8px !important;
			min-width: 100px !important;
			justify-content: center !important;
			background: #1C3D6B !important;
			color: #fff !important;
			line-height: 1.2 !important;
			}

			.btn_list_all:hover {
			background: #5C5DB0 !important;
			transform: translateY(-2px) !important;
			}

			.content_area {
			display: flex;
			flex-direction: column;
			gap: 25px;
			}

			.grid_section {
			background: white;
			border-radius: 12px;
			overflow: hidden;
			box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
			}

			.grid_header {
			background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
			padding: 20px 25px;
			border-bottom: 1px solid #dee2e6;
			display: flex;
			justify-content: space-between;
			align-items: center;
			}

			.grid_title {
			font-size: 1.3em !important;
			font-weight: 600 !important;
			color: #1C3D6B !important;
			margin: 0 !important;
			}

			.grid_buttons {
			display: flex;
			gap: 10px;
			}

			.btn_excel {
			padding: 12px 24px !important;
			border: none !important;
			border-radius: 8px !important;
			font-size: 1em !important;
			font-weight: bold !important;
			cursor: pointer !important;
			transition: all 0.3s ease !important;
			background: #1C3D6B !important;
			color: #fff !important;
			line-height: 1.2 !important;
			}

			.btn_excel:hover {
			background: #5C5DB0 !important;
			transform: translateY(-2px) !important;
			}

			.btn_delete_multi {
			padding: 12px 24px !important;
			border: none !important;
			border-radius: 8px !important;
			font-size: 1em !important;
			font-weight: bold !important;
			cursor: pointer !important;
			transition: all 0.3s ease !important;
			background: #1C3D6B !important;
			color: #fff !important;
			line-height: 1.2 !important;
			}

			.btn_delete_multi:hover {
			background: #5C5DB0 !important;
			transform: translateY(-2px) !important;
			}

			.grid_view {
			margin: 25px !important;
			}

			.form_section {
			background: white;
			padding: 25px;
			border-radius: 12px;
			box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
			}

			.form_header {
			display: flex;
			justify-content: space-between;
			align-items: center;
			margin-bottom: 20px;
			padding-bottom: 10px;
			border-bottom: 2px solid #e9ecef;
			}

			.form_title {
			font-size: 1.3em !important;
			font-weight: 600 !important;
			color: #1C3D6B !important;
			margin: 0 !important;
			}

			.form_buttons {
			display: flex;
			gap: 10px;
			}

			.btn_insert, .btn_update, .btn_delete {
			padding: 12px 24px !important;
			border: none !important;
			border-radius: 8px !important;
			font-size: 1em !important;
			font-weight: bold !important;
			cursor: pointer !important;
			transition: all 0.3s ease !important;
			text-decoration: none !important;
			display: inline-flex !important;
			align-items: center !important;
			gap: 8px !important;
			min-width: 120px !important;
			justify-content: center !important;
			line-height: 1.2 !important;
			}

			.btn_insert {
			background: #1C3D6B !important;
			color: #fff !important;
			}

			.btn_insert:hover {
			background: #5C5DB0 !important;
			transform: translateY(-2px) !important;
			}

			.btn_update {
			background: #1C3D6B !important;
			color: #fff !important;
			}

			.btn_update:hover {
			background: #5C5DB0 !important;
			transform: translateY(-2px) !important;
			}

			.btn_delete {
			background: #1C3D6B !important;
			color: #fff !important;
			}

			.btn_delete:hover {
			background: #5C5DB0 !important;
			transform: translateY(-2px) !important;
			}

			.form_content {
			display: flex;
			flex-direction: column;
			gap: 20px;
			}

			.form_row {
			display: grid;
			grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
			gap: 20px;
			}

			.form_item {
			display: grid;
			grid-template-columns: 150px 1fr;
			gap: 15px;
			align-items: center;
			}

			.form_item.full_width {
			grid-column: 1 / -1;
			}

			.form_label {
			font-weight: 600 !important;
			color: #495057 !important;
			text-align: right !important;
			padding-right: 10px !important;
			}

			.form_label.required::after {
			content: ' *';
			color: #dc3545;
			}

			.form_input {
			padding: 12px 16px !important;
			border: 2px solid #e9ecef !important;
			border-radius: 8px !important;
			font-size: 1em !important;
			transition: all 0.3s ease !important;
			}

			.form_input:focus {
			outline: none !important;
			border-color: #1C3D6B !important;
			box-shadow: 0 0 0 3px rgba(28, 61, 107, 0.1) !important;
			}

			.form_textarea {
			padding: 12px 16px !important;
			border: 2px solid #e9ecef !important;
			border-radius: 8px !important;
			font-size: 1em !important;
			transition: all 0.3s ease !important;
			min-height: 100px !important;
			resize: vertical !important;
			}

			.form_textarea:focus {
			outline: none !important;
			border-color: #1C3D6B !important;
			box-shadow: 0 0 0 3px rgba(28, 61, 107, 0.1) !important;
			}
		</style>
	</head>
	<body>
		<xf:group class="sub_contents">
			<!-- 병원 정보 헤더 -->
			<xf:group class="hospital_header">
				<xf:group class="hospital_info">
					<xf:image src="/InsWebApp/images/medicalteam.png" style="width:100px;height:100px;" id="img_logo" alt="병원 로고" />
					<xf:group class="hospital_details">
						<w2:textbox class="hospital_name" id="txt_hospitalName" label="삼육대학교병원"></w2:textbox>
						<w2:textbox class="hospital_dept" id="txt_hospitalDept" label="내과병동"></w2:textbox>
					</xf:group>
				</xf:group>
				<xf:group class="user_info">
					<w2:textbox class="current_user" id="txt_currentUser" label="관리자"></w2:textbox>
					<w2:textbox class="current_date" id="txt_currentDate" label=""></w2:textbox>
				</xf:group>
			</xf:group>

			<xf:group class="search_area">
				<xf:group class="search_header">
					<xf:group style="display:flex;align-items:center;gap:10px;">
						<xf:image src="/InsWebApp/images/iconsearch.png" style="width:22px;height:22px;margin-top: -5px;" id="iconsearch1"
							alt="검색 아이콘" />
						<w2:textbox class="search_title" id="txt_searchTitle" label="간호사 검색"></w2:textbox>
					</xf:group>
					<w2:textbox class="search_guide" id="txt_searchGuide" label="• 근무자명 또는 직급 중 하나만 입력해도 검색됩니다 • 글자 일부만 입력해도 검색 가능합니다"></w2:textbox>
				</xf:group>
				<xf:group class="search_row">
					<xf:group class="search_item">
						<w2:textbox class="search_label" id="lbl_nurseName_search" label="근무자명"></w2:textbox>
						<xf:input class="search_input" id="ipt_scNurseName" ref="data:dmp_nurseVo.scNurseName" placeholder="예: 김, 이, 박"></xf:input>
					</xf:group>
					<xf:group class="search_item">
						<w2:textbox class="search_label" id="lbl_position_search" label="직급"></w2:textbox>
						<xf:input class="search_input" id="ipt_scPosition" ref="data:dmp_nurseVo.scPosition" placeholder="예: 간호사, 선임, 수간호사"></xf:input>
					</xf:group>
					<xf:group class="search_buttons">
						<w2:button class="btn_search" id="btn_search" ev:onclick="scwin.btn_search_onclick" label="검색">
							<xf:image src="/InsWebApp/images/iconsearch1.png" style="width:20px;height:20px;" id="iconsearch2" alt="검색 아이콘" />
						</w2:button>
						<w2:button class="btn_list_all" id="btn_list_all" ev:onclick="scwin.btn_list_all_onclick" label="전체조회">
							<xf:image src="/InsWebApp/images/medicalreport.png" style="width:20px;height:20px;" id="medicalreport" alt="조회 아이콘" />
						</w2:button>
						<w2:button class="btn_reset" id="btn_reset" ev:onclick="scwin.btn_reset_onclick" label="초기화">
							<xf:image src="/InsWebApp/images/reload.png" style="width:20px;height:20px;" id="reload" alt="초기화 아이콘" />
						</w2:button>
					</xf:group>
				</xf:group>
			</xf:group>

			<xf:group class="content_area">
				<xf:group class="grid_section">
					<xf:group class="grid_header">
						<w2:textbox class="grid_title" id="txt_gridTitle" label="간호사 목록"></w2:textbox>
						<xf:group class="grid_buttons">
							<w2:button class="btn_select_all" id="btn_select_all" ev:onclick="scwin.btn_select_all_onclick" label="전체선택">
								<xf:image src="/InsWebApp/images/selectall.png" style="width:20px;height:20px;margin-top:-5px;margin-right:10px;"
									id="selectall" alt="아이콘" />
							</w2:button>
							<w2:button class="btn_excel" id="btn_excel" ev:onclick="scwin.btn_excel_onclick" label="엑셀 업로드">
								<xf:image src="/InsWebApp/images/uploadfile.png" style="width:20px;height:20px;margin-top:-5px;margin-right:10px;"
									id="uploadfile" alt="업로드 아이콘" />
							</w2:button>
							<w2:button class="btn_insert_multi" id="btn_insert_multi" ev:onclick="scwin.btn_insert_multi_onclick" label="다중 등록">
								<xf:image src="/InsWebApp/images/adduser.png" style="width:20px;height:20px;margin-top:-5px;margin-right:10px;"
									id="adduser1" alt="등록 아이콘" />
							</w2:button>
							<w2:button class="btn_update_multi" id="btn_update_multi" ev:onclick="scwin.btn_update_multi_onclick" label="다중 수정">
								<xf:image src="/InsWebApp/images/editprofile.png" style="width:20px;height:20px;margin-top:-5px;margin-right:10px;"
									id="editprofile1" alt="수정 아이콘" />
							</w2:button>
							<w2:button class="btn_delete_multi" id="btn_delete_multi" ev:onclick="scwin.btn_delete_multi_onclick" label="선택 삭제">
								<xf:image src="/InsWebApp/images/deletebutton.png" style="width:20px;height:20px;margin-top:-5px;margin-right:10px;"
									id="deletebutton1" alt="삭제 아이콘" />
							</w2:button>
						</xf:group>
					</xf:group>

					<w2:gridView class="grid_view" id="grd_nurseList" dataList="data:dlt_nurseList" style="width:100%;height:300px;"
						scrollByColumn="false" defaultCellHeight="35" rowNumVisible="true" ev:oncellclick="scwin.grd_nurseList_oncellclick">
						<w2:caption id="caption1" value="간호사 목록"></w2:caption>
						<w2:header id="header1">
							<w2:row id="row1">
								<w2:column width="50" inputType="checkbox" style="height:35px" id="columnCheck" value="선택"
									displayMode="label">
								</w2:column>
								<w2:column width="150" inputType="text" style="height:35px" id="column2" value="근무자명" displayMode="label"></w2:column>
								<w2:column width="150" inputType="text" style="height:35px" id="column3" value="직급" displayMode="label"></w2:column>
								<w2:column width="150" inputType="text" style="height:35px" id="column4" value="연차(개월수)" displayMode="label"></w2:column>
								<w2:column width="633" inputType="text" style="height:35px" id="column5" value="특이사항" displayMode="label"></w2:column>
								<w2:column width="180" inputType="text" style="height:35px" id="column6" value="입사일" displayMode="label"></w2:column>
							</w2:row>
						</w2:header>
						<w2:gBody id="gBody1">
							<w2:row id="row2">
								<w2:column width="50" inputType="checkbox" style="height:35px" id="chk_select" value=""
									displayMode="editType">
								</w2:column>
								<w2:column width="150" inputType="text" style="height:35px" id="nurseName" value="" displayMode="label"></w2:column>
								<w2:column width="150" inputType="text" style="height:35px" id="position" value="" displayMode="label"></w2:column>
								<w2:column width="150" inputType="text" style="height:35px" id="career" value="" displayMode="label"></w2:column>
								<w2:column width="633" inputType="text" style="height:35px;" id="specialNote" value=""
									displayMode="label">
								</w2:column>
								<w2:column width="180" inputType="text" style="height:35px" id="hireDate" value="" displayMode="label"></w2:column>
							</w2:row>
						</w2:gBody>
					</w2:gridView>
				</xf:group>

				<xf:group class="form_section">
					<xf:group class="form_header">
						<w2:textbox class="form_title" id="txt_formTitle" label="간호사 정보"></w2:textbox>
						<xf:group class="form_buttons">
							<w2:button class="btn_insert" id="btn_insert" ev:onclick="scwin.btn_insert_onclick" label="등록">
								<xf:image src="/InsWebApp/images/adduser.png" style="width:20px;height:20px;" id="adduser2" alt="등록 아이콘" />
							</w2:button>
							<w2:button class="btn_update" id="btn_update" ev:onclick="scwin.btn_update_onclick" label="수정">
								<xf:image src="/InsWebApp/images/editprofile.png" style="width:20px;height:20px;" id="editprofile2" alt="수정 아이콘" />
							</w2:button>
							<w2:button class="btn_delete" id="btn_delete" ev:onclick="scwin.btn_delete_onclick" label="삭제">
								<xf:image src="/InsWebApp/images/deletebutton.png" style="width:20px;height:20px;" id="deletebutton2" alt="삭제 아이콘" />
							</w2:button>
						</xf:group>
					</xf:group>

					<xf:group class="form_content">
                        <xf:group class="form_row">
                            <xf:group class="form_item">
                                <w2:textbox class="form_label required" id="lbl_nurseName_form" label="근무자명"></w2:textbox>
                                <xf:input class="form_input" id="ipt_nurseName" ref="data:dmp_nurseVo.nurseName"></xf:input>
                            </xf:group>
                        </xf:group>
                        
                        <xf:group class="form_row">
                            <xf:group class="form_item">
                                <w2:textbox class="form_label required" id="lbl_position_form" label="직급"></w2:textbox>
                                <xf:input class="form_input" id="ipt_position" ref="data:dmp_nurseVo.position"></xf:input>
                            </xf:group>
                            <xf:group class="form_item">
                                <w2:textbox class="form_label" id="lbl_career" label="연차(개월수)"></w2:textbox>
                                <xf:input class="form_input" id="ipt_career" ref="data:dmp_nurseVo.career"></xf:input>
                            </xf:group>
                        </xf:group>
                        
                        <xf:group class="form_row">
                            <xf:group class="form_item">
                                <w2:textbox class="form_label" id="lbl_hireDate" label="입사일"></w2:textbox>
                                <xf:input class="form_input" id="ipt_hireDate" ref="data:dmp_nurseVo.hireDate" type="date"></xf:input>
                            </xf:group>
                        </xf:group>
                        
                        <xf:group class="form_row">
                            <xf:group class="form_item full_width">
                            	<w2:textbox class="form_label" id="lbl_specialNote" label="특이사항"></w2:textbox>
                            	<xf:textarea class="form_textarea" id="txt_specialNote" ref="data:dmp_nurseVo.specialNote" rows="3"></xf:textarea>
                            </xf:group>
                        </xf:group>
                    </xf:group>
				</xf:group>
			</xf:group>
		</xf:group>
	</body>
</html>